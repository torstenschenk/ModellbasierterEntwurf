// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_macc,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.440000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=230,HLS_SYN_LUT=302}" *)

module hls_macc (
        ap_clk,
        ap_rst_n,
        s_axi_HLS_MACC_PERIPH_BUS_AWVALID,
        s_axi_HLS_MACC_PERIPH_BUS_AWREADY,
        s_axi_HLS_MACC_PERIPH_BUS_AWADDR,
        s_axi_HLS_MACC_PERIPH_BUS_WVALID,
        s_axi_HLS_MACC_PERIPH_BUS_WREADY,
        s_axi_HLS_MACC_PERIPH_BUS_WDATA,
        s_axi_HLS_MACC_PERIPH_BUS_WSTRB,
        s_axi_HLS_MACC_PERIPH_BUS_ARVALID,
        s_axi_HLS_MACC_PERIPH_BUS_ARREADY,
        s_axi_HLS_MACC_PERIPH_BUS_ARADDR,
        s_axi_HLS_MACC_PERIPH_BUS_RVALID,
        s_axi_HLS_MACC_PERIPH_BUS_RREADY,
        s_axi_HLS_MACC_PERIPH_BUS_RDATA,
        s_axi_HLS_MACC_PERIPH_BUS_RRESP,
        s_axi_HLS_MACC_PERIPH_BUS_BVALID,
        s_axi_HLS_MACC_PERIPH_BUS_BREADY,
        s_axi_HLS_MACC_PERIPH_BUS_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_HLS_MACC_PERIPH_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_HLS_MACC_PERIPH_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;

parameter C_S_AXI_HLS_MACC_PERIPH_BUS_WSTRB_WIDTH = (C_S_AXI_HLS_MACC_PERIPH_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_HLS_MACC_PERIPH_BUS_AWVALID;
output   s_axi_HLS_MACC_PERIPH_BUS_AWREADY;
input  [C_S_AXI_HLS_MACC_PERIPH_BUS_ADDR_WIDTH - 1 : 0] s_axi_HLS_MACC_PERIPH_BUS_AWADDR;
input   s_axi_HLS_MACC_PERIPH_BUS_WVALID;
output   s_axi_HLS_MACC_PERIPH_BUS_WREADY;
input  [C_S_AXI_HLS_MACC_PERIPH_BUS_DATA_WIDTH - 1 : 0] s_axi_HLS_MACC_PERIPH_BUS_WDATA;
input  [C_S_AXI_HLS_MACC_PERIPH_BUS_WSTRB_WIDTH - 1 : 0] s_axi_HLS_MACC_PERIPH_BUS_WSTRB;
input   s_axi_HLS_MACC_PERIPH_BUS_ARVALID;
output   s_axi_HLS_MACC_PERIPH_BUS_ARREADY;
input  [C_S_AXI_HLS_MACC_PERIPH_BUS_ADDR_WIDTH - 1 : 0] s_axi_HLS_MACC_PERIPH_BUS_ARADDR;
output   s_axi_HLS_MACC_PERIPH_BUS_RVALID;
input   s_axi_HLS_MACC_PERIPH_BUS_RREADY;
output  [C_S_AXI_HLS_MACC_PERIPH_BUS_DATA_WIDTH - 1 : 0] s_axi_HLS_MACC_PERIPH_BUS_RDATA;
output  [1:0] s_axi_HLS_MACC_PERIPH_BUS_RRESP;
output   s_axi_HLS_MACC_PERIPH_BUS_BVALID;
input   s_axi_HLS_MACC_PERIPH_BUS_BREADY;
output  [1:0] s_axi_HLS_MACC_PERIPH_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_25;
reg    ap_ready;
wire  signed [31:0] a;
wire  signed [31:0] b;
wire   [31:0] accum;
reg    accum_ap_vld;
wire   [0:0] accum_clr;
reg   [31:0] acc_reg;
reg   [0:0] accum_clr_read_reg_86;
wire   [31:0] grp_fu_57_p2;
reg   [31:0] tmp_1_reg_101;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_90;
wire   [31:0] tmp_2_fu_74_p2;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_98;
wire   [31:0] p_acc_reg_load_fu_67_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
#0 acc_reg = 32'b00000000000000000000000000000000;
end

hls_macc_HLS_MACC_PERIPH_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_HLS_MACC_PERIPH_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_HLS_MACC_PERIPH_BUS_DATA_WIDTH ))
hls_macc_HLS_MACC_PERIPH_BUS_s_axi_U(
    .AWVALID(s_axi_HLS_MACC_PERIPH_BUS_AWVALID),
    .AWREADY(s_axi_HLS_MACC_PERIPH_BUS_AWREADY),
    .AWADDR(s_axi_HLS_MACC_PERIPH_BUS_AWADDR),
    .WVALID(s_axi_HLS_MACC_PERIPH_BUS_WVALID),
    .WREADY(s_axi_HLS_MACC_PERIPH_BUS_WREADY),
    .WDATA(s_axi_HLS_MACC_PERIPH_BUS_WDATA),
    .WSTRB(s_axi_HLS_MACC_PERIPH_BUS_WSTRB),
    .ARVALID(s_axi_HLS_MACC_PERIPH_BUS_ARVALID),
    .ARREADY(s_axi_HLS_MACC_PERIPH_BUS_ARREADY),
    .ARADDR(s_axi_HLS_MACC_PERIPH_BUS_ARADDR),
    .RVALID(s_axi_HLS_MACC_PERIPH_BUS_RVALID),
    .RREADY(s_axi_HLS_MACC_PERIPH_BUS_RREADY),
    .RDATA(s_axi_HLS_MACC_PERIPH_BUS_RDATA),
    .RRESP(s_axi_HLS_MACC_PERIPH_BUS_RRESP),
    .BVALID(s_axi_HLS_MACC_PERIPH_BUS_BVALID),
    .BREADY(s_axi_HLS_MACC_PERIPH_BUS_BREADY),
    .BRESP(s_axi_HLS_MACC_PERIPH_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .b(b),
    .accum(accum),
    .accum_ap_vld(accum_ap_vld),
    .accum_clr(accum_clr)
);

hls_macc_mul_32s_32s_32_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_32s_32_7_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(b),
    .din1(a),
    .ce(1'b1),
    .dout(grp_fu_57_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        acc_reg <= tmp_2_fu_74_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        accum_clr_read_reg_86 <= accum_clr;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_1_reg_101 <= grp_fu_57_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        accum_ap_vld = 1'b1;
    end else begin
        accum_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_90) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_98) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum = (p_acc_reg_load_fu_67_p3 + tmp_1_reg_101);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_25 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_90 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_98 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

assign p_acc_reg_load_fu_67_p3 = ((accum_clr_read_reg_86[0:0] === 1'b1) ? ap_const_lv32_0 : acc_reg);

assign tmp_2_fu_74_p2 = (p_acc_reg_load_fu_67_p3 + tmp_1_reg_101);

endmodule //hls_macc
