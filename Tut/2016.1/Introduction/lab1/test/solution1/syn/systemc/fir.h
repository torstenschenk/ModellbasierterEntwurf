// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_mul_32s_32s_32_6.h"
#include "fir_shift_reg.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_out< sc_lv<4> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<32> > c_q0;
    sc_in< sc_lv<32> > x;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg* shift_reg_U;
    fir_mul_32s_32s_32_6<1,6,32,32,32>* fir_mul_32s_32s_32_6_U0;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< sc_lv<4> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<32> > shift_reg_d0;
    sc_signal< sc_lv<32> > shift_reg_q0;
    sc_signal< sc_lv<32> > acc_reg_101;
    sc_signal< sc_lv<5> > i_reg_114;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_58;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_lv<1> > tmp_fu_136_p3;
    sc_signal< sc_lv<1> > tmp_reg_199;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_reg_199_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_reg_199_pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_reg_199_pp0_it3;
    sc_signal< sc_lv<1> > tmp_1_fu_148_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_203;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg1_fsm_2;
    sc_signal< bool > ap_sig_bdd_100;
    sc_signal< sc_lv<5> > i_1_fu_175_p2;
    sc_signal< sc_lv<5> > i_1_reg_222;
    sc_signal< sc_lv<32> > acc_1_fu_187_p2;
    sc_signal< sc_lv<5> > i_phi_fu_118_p4;
    sc_signal< sc_lv<32> > ap_reg_phiprechg_data1_reg_126pp0_it0;
    sc_signal< sc_lv<32> > ap_reg_phiprechg_data1_reg_126pp0_it1;
    sc_signal< sc_lv<64> > tmp_3_fu_160_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_165_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_170_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_3;
    sc_signal< bool > ap_sig_bdd_150;
    sc_signal< sc_lv<4> > tmp_8_fu_144_p1;
    sc_signal< sc_lv<4> > tmp_2_fu_154_p2;
    sc_signal< sc_lv<32> > grp_fu_181_p2;
    sc_signal< sc_logic > grp_fu_181_ce;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_137;
    sc_signal< bool > ap_sig_bdd_106;
    sc_signal< bool > ap_sig_bdd_103;
    sc_signal< bool > ap_sig_bdd_94;
    sc_signal< bool > ap_sig_bdd_226;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<4> ap_ST_pp0_stg1_fsm_2;
    static const sc_lv<4> ap_ST_st10_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<5> ap_const_lv5_1F;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_187_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_phiprechg_data1_reg_126pp0_it0();
    void thread_ap_sig_bdd_100();
    void thread_ap_sig_bdd_103();
    void thread_ap_sig_bdd_106();
    void thread_ap_sig_bdd_137();
    void thread_ap_sig_bdd_150();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_bdd_226();
    void thread_ap_sig_bdd_58();
    void thread_ap_sig_bdd_94();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_pp0_stg1_fsm_2();
    void thread_ap_sig_cseq_ST_st10_fsm_3();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_grp_fu_181_ce();
    void thread_i_1_fu_175_p2();
    void thread_i_phi_fu_118_p4();
    void thread_shift_reg_address0();
    void thread_shift_reg_ce0();
    void thread_shift_reg_d0();
    void thread_shift_reg_we0();
    void thread_tmp_1_fu_148_p2();
    void thread_tmp_2_fu_154_p2();
    void thread_tmp_3_fu_160_p1();
    void thread_tmp_4_fu_165_p1();
    void thread_tmp_5_fu_170_p1();
    void thread_tmp_8_fu_144_p1();
    void thread_tmp_fu_136_p3();
    void thread_y();
    void thread_y_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
