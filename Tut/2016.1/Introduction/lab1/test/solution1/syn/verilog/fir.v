// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2015_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7vx690trf1930-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.680000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=148,HLS_SYN_LUT=167}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 4'b100;
parameter    ap_ST_st10_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_A = 5'b1010;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg c_ce0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [31:0] acc_reg_101;
reg   [4:0] i_reg_114;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_58;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
wire   [0:0] tmp_fu_136_p3;
reg   [0:0] tmp_reg_199;
reg   [0:0] ap_reg_ppstg_tmp_reg_199_pp0_it1;
reg   [0:0] ap_reg_ppstg_tmp_reg_199_pp0_it2;
reg   [0:0] ap_reg_ppstg_tmp_reg_199_pp0_it3;
wire   [0:0] tmp_1_fu_148_p2;
reg   [0:0] tmp_1_reg_203;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_bdd_100;
wire   [4:0] i_1_fu_175_p2;
reg   [4:0] i_1_reg_222;
wire   [31:0] acc_1_fu_187_p2;
reg   [4:0] i_phi_fu_118_p4;
wire  signed [31:0] ap_reg_phiprechg_data1_reg_126pp0_it0;
reg  signed [31:0] ap_reg_phiprechg_data1_reg_126pp0_it1;
wire   [63:0] tmp_3_fu_160_p1;
wire   [63:0] tmp_4_fu_165_p1;
wire   [63:0] tmp_5_fu_170_p1;
reg    ap_sig_cseq_ST_st10_fsm_3;
reg    ap_sig_bdd_150;
wire   [3:0] tmp_8_fu_144_p1;
wire   [3:0] tmp_2_fu_154_p2;
wire   [31:0] grp_fu_181_p2;
wire    grp_fu_181_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_sig_bdd_137;
reg    ap_sig_bdd_106;
reg    ap_sig_bdd_103;
reg    ap_sig_bdd_94;
reg    ap_sig_bdd_226;


fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_address0 ),
    .ce0( shift_reg_ce0 ),
    .we0( shift_reg_we0 ),
    .d0( shift_reg_d0 ),
    .q0( shift_reg_q0 )
);

fir_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_6_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( ap_reg_phiprechg_data1_reg_126pp0_it1 ),
    .din1( c_q0 ),
    .ce( grp_fu_181_ce ),
    .dout( grp_fu_181_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_fu_136_p3 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (tmp_reg_199 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & ~(tmp_reg_199 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (ap_reg_ppstg_tmp_reg_199_pp0_it3 == ap_const_lv1_0))) begin
        acc_reg_101 <= acc_1_fu_187_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        acc_reg_101 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (ap_sig_bdd_103) begin
        if (ap_sig_bdd_106) begin
            ap_reg_phiprechg_data1_reg_126pp0_it1 <= shift_reg_q0;
        end else if (ap_sig_bdd_137) begin
            ap_reg_phiprechg_data1_reg_126pp0_it1 <= x;
        end else if ((ap_true == ap_true)) begin
            ap_reg_phiprechg_data1_reg_126pp0_it1 <= ap_reg_phiprechg_data1_reg_126pp0_it0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_reg_199 == ap_const_lv1_0))) begin
        i_reg_114 <= i_1_reg_222;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_114 <= ap_const_lv5_A;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_tmp_reg_199_pp0_it1 <= tmp_reg_199;
        ap_reg_ppstg_tmp_reg_199_pp0_it2 <= ap_reg_ppstg_tmp_reg_199_pp0_it1;
        ap_reg_ppstg_tmp_reg_199_pp0_it3 <= ap_reg_ppstg_tmp_reg_199_pp0_it2;
        tmp_reg_199 <= i_phi_fu_118_p4[ap_const_lv32_4];
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (tmp_reg_199 == ap_const_lv1_0))) begin
        i_1_reg_222 <= i_1_fu_175_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_fu_136_p3 == ap_const_lv1_0))) begin
        tmp_1_reg_203 <= tmp_1_fu_148_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_3)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_3)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_58) begin
    if (ap_sig_bdd_58) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. ///
always @ (ap_sig_bdd_100) begin
    if (ap_sig_bdd_100) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_3 assign process. ///
always @ (ap_sig_bdd_150) begin
    if (ap_sig_bdd_150) begin
        ap_sig_cseq_ST_st10_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20) begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// c_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        c_ce0 = ap_const_logic_1;
    end else begin
        c_ce0 = ap_const_logic_0;
    end
end

/// i_phi_fu_118_p4 assign process. ///
always @ (i_reg_114 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or tmp_reg_199 or i_1_reg_222) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_reg_199 == ap_const_lv1_0))) begin
        i_phi_fu_118_p4 = i_1_reg_222;
    end else begin
        i_phi_fu_118_p4 = i_reg_114;
    end
end

/// shift_reg_address0 assign process. ///
always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or tmp_3_fu_160_p1 or tmp_4_fu_165_p1 or ap_sig_bdd_94 or ap_sig_bdd_226) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            shift_reg_address0 = tmp_4_fu_165_p1;
        end else if (ap_sig_bdd_226) begin
            shift_reg_address0 = ap_const_lv4_0;
        end else if (ap_sig_bdd_94) begin
            shift_reg_address0 = tmp_3_fu_160_p1;
        end else begin
            shift_reg_address0 = 'bx;
        end
    end else begin
        shift_reg_address0 = 'bx;
    end
end

/// shift_reg_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or tmp_fu_136_p3 or tmp_1_fu_148_p2 or ap_sig_cseq_ST_pp0_stg1_fsm_2) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (tmp_fu_136_p3 == ap_const_lv1_0) & (tmp_1_fu_148_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (tmp_fu_136_p3 == ap_const_lv1_0) & ~(tmp_1_fu_148_p2 == ap_const_lv1_0)))) begin
        shift_reg_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_d0 assign process. ///
always @ (x or shift_reg_q0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_bdd_226) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            shift_reg_d0 = shift_reg_q0;
        end else if (ap_sig_bdd_226) begin
            shift_reg_d0 = x;
        end else begin
            shift_reg_d0 = 'bx;
        end
    end else begin
        shift_reg_d0 = 'bx;
    end
end

/// shift_reg_we0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or tmp_fu_136_p3 or tmp_reg_199 or tmp_1_fu_148_p2 or tmp_1_reg_203 or ap_sig_cseq_ST_pp0_stg1_fsm_2) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (tmp_reg_199 == ap_const_lv1_0) & (tmp_1_reg_203 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (tmp_fu_136_p3 == ap_const_lv1_0) & ~(tmp_1_fu_148_p2 == ap_const_lv1_0)))) begin
        shift_reg_we0 = ap_const_logic_1;
    end else begin
        shift_reg_we0 = ap_const_logic_0;
    end
end

/// y_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_3)) begin
        y_ap_vld = ap_const_logic_1;
    end else begin
        y_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or tmp_fu_136_p3 or ap_sig_cseq_ST_pp0_stg1_fsm_2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(tmp_fu_136_p3 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_3;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_3;
            end
        end
        ap_ST_st10_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_187_p2 = (acc_reg_101 + grp_fu_181_p2);
assign ap_reg_phiprechg_data1_reg_126pp0_it0 = 'bx;

/// ap_sig_bdd_100 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_100 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_103 assign process. ///
always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2) begin
    ap_sig_bdd_103 = ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2));
end

/// ap_sig_bdd_106 assign process. ///
always @ (tmp_reg_199 or tmp_1_reg_203) begin
    ap_sig_bdd_106 = ((tmp_reg_199 == ap_const_lv1_0) & (tmp_1_reg_203 == ap_const_lv1_0));
end

/// ap_sig_bdd_137 assign process. ///
always @ (tmp_reg_199 or tmp_1_reg_203) begin
    ap_sig_bdd_137 = ((tmp_reg_199 == ap_const_lv1_0) & ~(tmp_1_reg_203 == ap_const_lv1_0));
end

/// ap_sig_bdd_150 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_150 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_226 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_fu_136_p3 or tmp_1_fu_148_p2) begin
    ap_sig_bdd_226 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_fu_136_p3 == ap_const_lv1_0) & ~(tmp_1_fu_148_p2 == ap_const_lv1_0));
end

/// ap_sig_bdd_58 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_58 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_fu_136_p3 or tmp_1_fu_148_p2) begin
    ap_sig_bdd_94 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_fu_136_p3 == ap_const_lv1_0) & (tmp_1_fu_148_p2 == ap_const_lv1_0));
end
assign c_address0 = tmp_5_fu_170_p1;
assign grp_fu_181_ce = ap_const_logic_1;
assign i_1_fu_175_p2 = ($signed(i_reg_114) + $signed(ap_const_lv5_1F));
assign tmp_1_fu_148_p2 = (i_phi_fu_118_p4 == ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_2_fu_154_p2 = ($signed(tmp_8_fu_144_p1) + $signed(ap_const_lv4_F));
assign tmp_3_fu_160_p1 = tmp_2_fu_154_p2;
assign tmp_4_fu_165_p1 = i_reg_114;
assign tmp_5_fu_170_p1 = i_reg_114;
assign tmp_8_fu_144_p1 = i_phi_fu_118_p4[3:0];
assign tmp_fu_136_p3 = i_phi_fu_118_p4[ap_const_lv32_4];
assign y = acc_reg_101;


endmodule //fir

