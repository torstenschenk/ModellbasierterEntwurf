// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2016_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.220000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8,HLS_SYN_LUT=97}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        result_q0,
        result_address1,
        result_ce1,
        result_we1,
        result_d1,
        result_q1,
        n
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv5_14 = 5'b10100;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv5_1 = 5'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] result_address0;
output   result_ce0;
output   result_we0;
output  [31:0] result_d0;
input  [31:0] result_q0;
output  [4:0] result_address1;
output   result_ce1;
output   result_we1;
output  [31:0] result_d1;
input  [31:0] result_q1;
input  [31:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] result_address0;
reg result_ce0;
reg result_we0;
reg[31:0] result_d0;
reg[4:0] result_address1;
reg result_ce1;
reg result_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_18;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_46;
wire   [0:0] exitcond_fu_97_p2;
wire   [4:0] i_1_fu_137_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_61;
reg   [4:0] i_reg_85;
wire   [63:0] sum_cast_fu_109_p1;
wire   [63:0] sum3_cast_fu_120_p1;
wire   [63:0] tmp_fu_125_p1;
wire   [31:0] tmp_1_fu_130_p2;
wire   [4:0] sum_fu_103_p2;
wire   [4:0] sum3_fu_114_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_85 <= i_1_fu_137_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_85 <= ap_const_lv5_2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_97_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_97_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_46) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_61) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        result_address0 = tmp_fu_125_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        result_address0 = ap_const_lv64_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        result_address0 = sum_cast_fu_109_p1;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        result_address1 = ap_const_lv64_1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        result_address1 = sum3_cast_fu_120_p1;
    end else begin
        result_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)))) begin
        result_ce1 = 1'b1;
    end else begin
        result_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        result_d0 = tmp_1_fu_130_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        result_d0 = ap_const_lv32_1;
    end else begin
        result_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        result_we1 = 1'b1;
    end else begin
        result_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond_fu_97_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_18 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_46 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_61 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond_fu_97_p2 = ((i_reg_85 == ap_const_lv5_14) ? 1'b1 : 1'b0);

assign i_1_fu_137_p2 = (i_reg_85 + ap_const_lv5_1);

assign result_d1 = ap_const_lv32_1;

assign sum3_cast_fu_120_p1 = sum3_fu_114_p2;

assign sum3_fu_114_p2 = ($signed(i_reg_85) + $signed(ap_const_lv5_1E));

assign sum_cast_fu_109_p1 = sum_fu_103_p2;

assign sum_fu_103_p2 = ($signed(i_reg_85) + $signed(ap_const_lv5_1F));

assign tmp_1_fu_130_p2 = (result_q0 + result_q1);

assign tmp_fu_125_p1 = i_reg_85;

endmodule //fir
