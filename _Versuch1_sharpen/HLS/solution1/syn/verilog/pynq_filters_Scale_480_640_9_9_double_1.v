// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynq_filters_Scale_480_640_9_9_double_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_V_V_dout,
        src_data_stream_V_V_empty_n,
        src_data_stream_V_V_read,
        dst_data_stream_V_V_din,
        dst_data_stream_V_V_full_n,
        dst_data_stream_V_V_write,
        scale_dout,
        scale_empty_n,
        scale_read
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [9:0] src_data_stream_V_V_dout;
input   src_data_stream_V_V_empty_n;
output   src_data_stream_V_V_read;
output  [9:0] dst_data_stream_V_V_din;
input   dst_data_stream_V_V_full_n;
output   dst_data_stream_V_V_write;
input  [63:0] scale_dout;
input   scale_empty_n;
output   scale_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_V_V_read;
reg dst_data_stream_V_V_write;
reg scale_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_20;
reg    scale_blk_n;
reg   [63:0] scale_read_reg_38;
reg    ap_sig_50;
wire    grp_pynq_filters_arithm_pro_fu_28_ap_start;
wire    grp_pynq_filters_arithm_pro_fu_28_ap_done;
wire    grp_pynq_filters_arithm_pro_fu_28_ap_idle;
wire    grp_pynq_filters_arithm_pro_fu_28_ap_ready;
wire    grp_pynq_filters_arithm_pro_fu_28_src_data_stream_V_V_read;
wire   [9:0] grp_pynq_filters_arithm_pro_fu_28_dst_data_stream_V_V_din;
wire    grp_pynq_filters_arithm_pro_fu_28_dst_data_stream_V_V_write;
reg    ap_reg_grp_pynq_filters_arithm_pro_fu_28_ap_start;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_73;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'b1;
#0 ap_reg_grp_pynq_filters_arithm_pro_fu_28_ap_start = 1'b0;
end

pynq_filters_arithm_pro grp_pynq_filters_arithm_pro_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pynq_filters_arithm_pro_fu_28_ap_start),
    .ap_done(grp_pynq_filters_arithm_pro_fu_28_ap_done),
    .ap_idle(grp_pynq_filters_arithm_pro_fu_28_ap_idle),
    .ap_ready(grp_pynq_filters_arithm_pro_fu_28_ap_ready),
    .src_data_stream_V_V_dout(src_data_stream_V_V_dout),
    .src_data_stream_V_V_empty_n(src_data_stream_V_V_empty_n),
    .src_data_stream_V_V_read(grp_pynq_filters_arithm_pro_fu_28_src_data_stream_V_V_read),
    .dst_data_stream_V_V_din(grp_pynq_filters_arithm_pro_fu_28_dst_data_stream_V_V_din),
    .dst_data_stream_V_V_full_n(dst_data_stream_V_V_full_n),
    .dst_data_stream_V_V_write(grp_pynq_filters_arithm_pro_fu_28_dst_data_stream_V_V_write),
    .p0(scale_read_reg_38)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == grp_pynq_filters_arithm_pro_fu_28_ap_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_pynq_filters_arithm_pro_fu_28_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_50)) begin
            ap_reg_grp_pynq_filters_arithm_pro_fu_28_ap_start <= 1'b1;
        end else if ((1'b1 == grp_pynq_filters_arithm_pro_fu_28_ap_ready)) begin
            ap_reg_grp_pynq_filters_arithm_pro_fu_28_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_50)) begin
        scale_read_reg_38 <= scale_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == grp_pynq_filters_arithm_pro_fu_28_ap_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == grp_pynq_filters_arithm_pro_fu_28_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_73) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        dst_data_stream_V_V_write = grp_pynq_filters_arithm_pro_fu_28_dst_data_stream_V_V_write;
    end else begin
        dst_data_stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        scale_blk_n = scale_empty_n;
    end else begin
        scale_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_50)) begin
        scale_read = 1'b1;
    end else begin
        scale_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        src_data_stream_V_V_read = grp_pynq_filters_arithm_pro_fu_28_src_data_stream_V_V_read;
    end else begin
        src_data_stream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_50) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == grp_pynq_filters_arithm_pro_fu_28_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_20 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_50 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (scale_empty_n == 1'b0));
end

always @ (*) begin
    ap_sig_73 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign dst_data_stream_V_V_din = grp_pynq_filters_arithm_pro_fu_28_dst_data_stream_V_V_din;

assign grp_pynq_filters_arithm_pro_fu_28_ap_start = ap_reg_grp_pynq_filters_arithm_pro_fu_28_ap_start;

endmodule //pynq_filters_Scale_480_640_9_9_double_1
