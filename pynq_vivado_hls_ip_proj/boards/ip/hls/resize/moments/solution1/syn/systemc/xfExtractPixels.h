// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xfExtractPixels_HH_
#define _xfExtractPixels_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "resize_accel_mux_cud.h"

namespace ap_rtl {

struct xfExtractPixels : public sc_module {
    // Port declarations 13
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > tmp_buf_0_V_read;
    sc_in< sc_lv<24> > tmp_buf_1_V_read;
    sc_in< sc_lv<24> > tmp_buf_2_V_read;
    sc_in< sc_lv<24> > tmp_buf_3_V_read;
    sc_in< sc_lv<24> > tmp_buf_4_V_read;
    sc_in< sc_lv<24> > val1_V_read;
    sc_in< sc_lv<4> > pos_r;
    sc_out< sc_lv<24> > ap_return_0;
    sc_out< sc_lv<24> > ap_return_1;
    sc_out< sc_lv<24> > ap_return_2;
    sc_out< sc_lv<24> > ap_return_3;
    sc_out< sc_lv<24> > ap_return_4;


    // Module declarations
    xfExtractPixels(sc_module_name name);
    SC_HAS_PROCESS(xfExtractPixels);

    ~xfExtractPixels();

    sc_trace_file* mVcdFile;

    resize_accel_mux_cud<1,1,24,24,24,24,24,24,24,24,3,24>* resize_accel_mux_cud_U8;
    resize_accel_mux_cud<1,1,24,24,24,24,24,24,24,24,3,24>* resize_accel_mux_cud_U9;
    resize_accel_mux_cud<1,1,24,24,24,24,24,24,24,24,3,24>* resize_accel_mux_cud_U10;
    resize_accel_mux_cud<1,1,24,24,24,24,24,24,24,24,3,24>* resize_accel_mux_cud_U11;
    resize_accel_mux_cud<1,1,24,24,24,24,24,24,24,24,3,24>* resize_accel_mux_cud_U12;
    sc_signal< sc_lv<3> > tmp_fu_64_p1;
    sc_signal< sc_lv<24> > tmp_buf_0_V_write_a_fu_68_p10;
    sc_signal< sc_lv<24> > tmp_buf_1_V_write_a_fu_90_p10;
    sc_signal< sc_lv<24> > tmp_buf_2_V_write_a_fu_134_p10;
    sc_signal< sc_lv<24> > tmp_buf_3_V_write_a_fu_156_p10;
    sc_signal< sc_lv<24> > tmp_buf_4_V_write_a_fu_112_p10;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_tmp_fu_64_p1();
};

}

using namespace ap_rtl;

#endif
