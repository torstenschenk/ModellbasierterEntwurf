-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xfExtractPixels is
port (
    ap_ready : OUT STD_LOGIC;
    tmp_buf_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    val1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of xfExtractPixels is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal tmp_fu_64_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_buf_0_V_write_a_fu_68_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_buf_1_V_write_a_fu_90_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_buf_2_V_write_a_fu_134_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_buf_3_V_write_a_fu_156_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_buf_4_V_write_a_fu_112_p10 : STD_LOGIC_VECTOR (23 downto 0);

    component resize_accel_mux_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (23 downto 0);
        din5 : IN STD_LOGIC_VECTOR (23 downto 0);
        din6 : IN STD_LOGIC_VECTOR (23 downto 0);
        din7 : IN STD_LOGIC_VECTOR (23 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    resize_accel_mux_cud_U8 : component resize_accel_mux_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => val1_V_read,
        din1 => tmp_buf_0_V_read,
        din2 => tmp_buf_0_V_read,
        din3 => tmp_buf_0_V_read,
        din4 => tmp_buf_0_V_read,
        din5 => tmp_buf_0_V_read,
        din6 => tmp_buf_0_V_read,
        din7 => tmp_buf_0_V_read,
        din8 => tmp_fu_64_p1,
        dout => tmp_buf_0_V_write_a_fu_68_p10);

    resize_accel_mux_cud_U9 : component resize_accel_mux_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_buf_1_V_read,
        din1 => val1_V_read,
        din2 => tmp_buf_1_V_read,
        din3 => tmp_buf_1_V_read,
        din4 => tmp_buf_1_V_read,
        din5 => tmp_buf_1_V_read,
        din6 => tmp_buf_1_V_read,
        din7 => tmp_buf_1_V_read,
        din8 => tmp_fu_64_p1,
        dout => tmp_buf_1_V_write_a_fu_90_p10);

    resize_accel_mux_cud_U10 : component resize_accel_mux_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_buf_4_V_read,
        din1 => tmp_buf_4_V_read,
        din2 => tmp_buf_4_V_read,
        din3 => tmp_buf_4_V_read,
        din4 => val1_V_read,
        din5 => val1_V_read,
        din6 => val1_V_read,
        din7 => val1_V_read,
        din8 => tmp_fu_64_p1,
        dout => tmp_buf_4_V_write_a_fu_112_p10);

    resize_accel_mux_cud_U11 : component resize_accel_mux_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_buf_2_V_read,
        din1 => tmp_buf_2_V_read,
        din2 => val1_V_read,
        din3 => tmp_buf_2_V_read,
        din4 => tmp_buf_2_V_read,
        din5 => tmp_buf_2_V_read,
        din6 => tmp_buf_2_V_read,
        din7 => tmp_buf_2_V_read,
        din8 => tmp_fu_64_p1,
        dout => tmp_buf_2_V_write_a_fu_134_p10);

    resize_accel_mux_cud_U12 : component resize_accel_mux_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_buf_3_V_read,
        din1 => tmp_buf_3_V_read,
        din2 => tmp_buf_3_V_read,
        din3 => val1_V_read,
        din4 => tmp_buf_3_V_read,
        din5 => tmp_buf_3_V_read,
        din6 => tmp_buf_3_V_read,
        din7 => tmp_buf_3_V_read,
        din8 => tmp_fu_64_p1,
        dout => tmp_buf_3_V_write_a_fu_156_p10);




    ap_ready <= ap_const_logic_1;
    ap_return_0 <= tmp_buf_0_V_write_a_fu_68_p10;
    ap_return_1 <= tmp_buf_1_V_write_a_fu_90_p10;
    ap_return_2 <= tmp_buf_2_V_write_a_fu_134_p10;
    ap_return_3 <= tmp_buf_3_V_write_a_fu_156_p10;
    ap_return_4 <= tmp_buf_4_V_write_a_fu_112_p10;
    tmp_fu_64_p1 <= pos_r(3 - 1 downto 0);
end behav;
