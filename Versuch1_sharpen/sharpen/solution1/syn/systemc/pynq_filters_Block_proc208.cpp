// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pynq_filters_Block_proc208.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pynq_filters_Block_proc208::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pynq_filters_Block_proc208::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st1_fsm_0 = "1";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st2_fsm_1 = "10";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st3_fsm_2 = "100";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st4_fsm_3 = "1000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st5_fsm_4 = "10000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st6_fsm_5 = "100000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st18_fsm_17 = "100000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st19_fsm_18 = "1000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st20_fsm_19 = "10000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st21_fsm_20 = "100000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st22_fsm_21 = "1000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st23_fsm_22 = "10000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st24_fsm_23 = "100000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st25_fsm_24 = "1000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st26_fsm_25 = "10000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st27_fsm_26 = "100000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st28_fsm_27 = "1000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st29_fsm_28 = "10000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st30_fsm_29 = "100000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st31_fsm_30 = "1000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st32_fsm_31 = "10000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st33_fsm_32 = "100000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st34_fsm_33 = "1000000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st35_fsm_34 = "10000000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st36_fsm_35 = "100000000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st37_fsm_36 = "1000000000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st38_fsm_37 = "10000000000000000000000000000000000000";
const sc_lv<39> pynq_filters_Block_proc208::ap_ST_st39_fsm_38 = "100000000000000000000000000000000000000";
const sc_lv<32> pynq_filters_Block_proc208::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> pynq_filters_Block_proc208::ap_const_lv1_1 = "1";
const sc_lv<32> pynq_filters_Block_proc208::ap_const_lv32_26 = "100110";
const sc_lv<32> pynq_filters_Block_proc208::ap_const_lv32_6 = "110";
const sc_lv<32> pynq_filters_Block_proc208::ap_const_lv32_25 = "100101";
const sc_lv<64> pynq_filters_Block_proc208::ap_const_lv64_4059000000000000 = "100000001011001000000000000000000000000000000000000000000000000";
const sc_lv<32> pynq_filters_Block_proc208::ap_const_lv32_7 = "111";
const sc_lv<32> pynq_filters_Block_proc208::ap_const_lv32_1 = "1";

pynq_filters_Block_proc208::pynq_filters_Block_proc208(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pynq_filters_ddiv_64ns_64ns_64_31_U102 = new pynq_filters_ddiv_64ns_64ns_64_31<1,31,64,64,64>("pynq_filters_ddiv_64ns_64ns_64_31_U102");
    pynq_filters_ddiv_64ns_64ns_64_31_U102->clk(ap_clk);
    pynq_filters_ddiv_64ns_64ns_64_31_U102->reset(ap_rst);
    pynq_filters_ddiv_64ns_64ns_64_31_U102->din0(tmp_i_reg_48);
    pynq_filters_ddiv_64ns_64ns_64_31_U102->din1(ap_var_for_const0);
    pynq_filters_ddiv_64ns_64ns_64_31_U102->ce(ap_var_for_const1);
    pynq_filters_ddiv_64ns_64ns_64_31_U102->dout(grp_fu_35_p2);
    pynq_filters_sitodp_32ns_64_6_U103 = new pynq_filters_sitodp_32ns_64_6<1,6,32,64>("pynq_filters_sitodp_32ns_64_6_U103");
    pynq_filters_sitodp_32ns_64_6_U103->clk(ap_clk);
    pynq_filters_sitodp_32ns_64_6_U103->reset(ap_rst);
    pynq_filters_sitodp_32ns_64_6_U103->din0(reduce_read_reg_43);
    pynq_filters_sitodp_32ns_64_6_U103->ce(ap_var_for_const1);
    pynq_filters_sitodp_32ns_64_6_U103->dout(grp_fu_40_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp_1_out_out_full_n );
    sensitive << ( ap_sig_cseq_ST_st39_fsm_38 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_1_out_out_full_n );
    sensitive << ( ap_sig_cseq_ST_st39_fsm_38 );

    SC_METHOD(thread_ap_sig_101);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_110);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_125);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_133);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_84);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_91);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( reduce_empty_n );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_57 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_133 );

    SC_METHOD(thread_ap_sig_cseq_ST_st38_fsm_37);
    sensitive << ( ap_sig_110 );

    SC_METHOD(thread_ap_sig_cseq_ST_st39_fsm_38);
    sensitive << ( ap_sig_84 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_101 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_125 );

    SC_METHOD(thread_reduce_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( reduce_empty_n );

    SC_METHOD(thread_reduce_read);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_91 );

    SC_METHOD(thread_tmp_1_out_out_blk_n);
    sensitive << ( tmp_1_out_out_full_n );
    sensitive << ( ap_sig_cseq_ST_st39_fsm_38 );

    SC_METHOD(thread_tmp_1_out_out_din);
    sensitive << ( tmp_1_out_out_full_n );
    sensitive << ( ap_sig_cseq_ST_st39_fsm_38 );
    sensitive << ( tmp_1_i_reg_53 );

    SC_METHOD(thread_tmp_1_out_out_write);
    sensitive << ( tmp_1_out_out_full_n );
    sensitive << ( ap_sig_cseq_ST_st39_fsm_38 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_out_out_full_n );
    sensitive << ( ap_sig_91 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pynq_filters_Block_proc208_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, reduce_dout, "(port)reduce_dout");
    sc_trace(mVcdFile, reduce_empty_n, "(port)reduce_empty_n");
    sc_trace(mVcdFile, reduce_read, "(port)reduce_read");
    sc_trace(mVcdFile, tmp_1_out_out_din, "(port)tmp_1_out_out_din");
    sc_trace(mVcdFile, tmp_1_out_out_full_n, "(port)tmp_1_out_out_full_n");
    sc_trace(mVcdFile, tmp_1_out_out_write, "(port)tmp_1_out_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_57, "ap_sig_57");
    sc_trace(mVcdFile, reduce_blk_n, "reduce_blk_n");
    sc_trace(mVcdFile, tmp_1_out_out_blk_n, "tmp_1_out_out_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st39_fsm_38, "ap_sig_cseq_ST_st39_fsm_38");
    sc_trace(mVcdFile, ap_sig_84, "ap_sig_84");
    sc_trace(mVcdFile, reduce_read_reg_43, "reduce_read_reg_43");
    sc_trace(mVcdFile, ap_sig_91, "ap_sig_91");
    sc_trace(mVcdFile, grp_fu_40_p1, "grp_fu_40_p1");
    sc_trace(mVcdFile, tmp_i_reg_48, "tmp_i_reg_48");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_101, "ap_sig_101");
    sc_trace(mVcdFile, grp_fu_35_p2, "grp_fu_35_p2");
    sc_trace(mVcdFile, tmp_1_i_reg_53, "tmp_1_i_reg_53");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st38_fsm_37, "ap_sig_cseq_ST_st38_fsm_37");
    sc_trace(mVcdFile, ap_sig_110, "ap_sig_110");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_125, "ap_sig_125");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_133, "ap_sig_133");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

pynq_filters_Block_proc208::~pynq_filters_Block_proc208() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete pynq_filters_ddiv_64ns_64ns_64_31_U102;
    delete pynq_filters_sitodp_32ns_64_6_U103;
}

void pynq_filters_Block_proc208::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void pynq_filters_Block_proc208::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_4059000000000000;
}

void pynq_filters_Block_proc208::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st39_fsm_38.read()) && 
                    !esl_seteq<1,1,1>(tmp_1_out_out_full_n.read(), ap_const_logic_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_91.read())) {
        reduce_read_reg_43 = reduce_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st38_fsm_37.read())) {
        tmp_1_i_reg_53 = grp_fu_35_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        tmp_i_reg_48 = grp_fu_40_p1.read();
    }
}

void pynq_filters_Block_proc208::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st39_fsm_38.read()) && 
          !esl_seteq<1,1,1>(tmp_1_out_out_full_n.read(), ap_const_logic_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st39_fsm_38.read()) && 
         !esl_seteq<1,1,1>(tmp_1_out_out_full_n.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_sig_101() {
    ap_sig_101 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void pynq_filters_Block_proc208::thread_ap_sig_110() {
    ap_sig_110 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(37, 37));
}

void pynq_filters_Block_proc208::thread_ap_sig_125() {
    ap_sig_125 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void pynq_filters_Block_proc208::thread_ap_sig_133() {
    ap_sig_133 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void pynq_filters_Block_proc208::thread_ap_sig_57() {
    ap_sig_57 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void pynq_filters_Block_proc208::thread_ap_sig_84() {
    ap_sig_84 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(38, 38));
}

void pynq_filters_Block_proc208::thread_ap_sig_91() {
    ap_sig_91 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(reduce_empty_n.read(), ap_const_logic_0));
}

void pynq_filters_Block_proc208::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_57.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_133.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_sig_cseq_ST_st38_fsm_37() {
    if (ap_sig_110.read()) {
        ap_sig_cseq_ST_st38_fsm_37 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st38_fsm_37 = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_sig_cseq_ST_st39_fsm_38() {
    if (ap_sig_84.read()) {
        ap_sig_cseq_ST_st39_fsm_38 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st39_fsm_38 = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_101.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_125.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_reduce_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        reduce_blk_n = reduce_empty_n.read();
    } else {
        reduce_blk_n = ap_const_logic_1;
    }
}

void pynq_filters_Block_proc208::thread_reduce_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_91.read())) {
        reduce_read = ap_const_logic_1;
    } else {
        reduce_read = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_tmp_1_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st39_fsm_38.read())) {
        tmp_1_out_out_blk_n = tmp_1_out_out_full_n.read();
    } else {
        tmp_1_out_out_blk_n = ap_const_logic_1;
    }
}

void pynq_filters_Block_proc208::thread_tmp_1_out_out_din() {
    tmp_1_out_out_din = tmp_1_i_reg_53.read();
}

void pynq_filters_Block_proc208::thread_tmp_1_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st39_fsm_38.read()) && 
         !esl_seteq<1,1,1>(tmp_1_out_out_full_n.read(), ap_const_logic_0))) {
        tmp_1_out_out_write = ap_const_logic_1;
    } else {
        tmp_1_out_out_write = ap_const_logic_0;
    }
}

void pynq_filters_Block_proc208::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_91.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
            break;
        case 274877906944 : 
            if (!esl_seteq<1,1,1>(tmp_1_out_out_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st39_fsm_38;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

