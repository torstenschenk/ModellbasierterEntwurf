// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynq_filters_Block_proc208 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        reduce_dout,
        reduce_empty_n,
        reduce_read,
        tmp_1_out_out_din,
        tmp_1_out_out_full_n,
        tmp_1_out_out_write
);

parameter    ap_ST_st1_fsm_0 = 39'b1;
parameter    ap_ST_st2_fsm_1 = 39'b10;
parameter    ap_ST_st3_fsm_2 = 39'b100;
parameter    ap_ST_st4_fsm_3 = 39'b1000;
parameter    ap_ST_st5_fsm_4 = 39'b10000;
parameter    ap_ST_st6_fsm_5 = 39'b100000;
parameter    ap_ST_st7_fsm_6 = 39'b1000000;
parameter    ap_ST_st8_fsm_7 = 39'b10000000;
parameter    ap_ST_st9_fsm_8 = 39'b100000000;
parameter    ap_ST_st10_fsm_9 = 39'b1000000000;
parameter    ap_ST_st11_fsm_10 = 39'b10000000000;
parameter    ap_ST_st12_fsm_11 = 39'b100000000000;
parameter    ap_ST_st13_fsm_12 = 39'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 39'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 39'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 39'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 39'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 39'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 39'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 39'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 39'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 39'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 39'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 39'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 39'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 39'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 39'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 39'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 39'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 39'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 39'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 39'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 39'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 39'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 39'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 39'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 39'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 39'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 39'b100000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv64_4059000000000000 = 64'b100000001011001000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] reduce_dout;
input   reduce_empty_n;
output   reduce_read;
output  [63:0] tmp_1_out_out_din;
input   tmp_1_out_out_full_n;
output   tmp_1_out_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg reduce_read;
reg tmp_1_out_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_57;
reg    reduce_blk_n;
reg    tmp_1_out_out_blk_n;
reg    ap_sig_cseq_ST_st39_fsm_38;
reg    ap_sig_84;
reg   [31:0] reduce_read_reg_43;
reg    ap_sig_91;
wire   [63:0] grp_fu_40_p1;
reg   [63:0] tmp_i_reg_48;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_101;
wire   [63:0] grp_fu_35_p2;
reg   [63:0] tmp_1_i_reg_53;
reg    ap_sig_cseq_ST_st38_fsm_37;
reg    ap_sig_110;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_125;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_133;
reg   [38:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 39'b1;
end

pynq_filters_ddiv_64ns_64ns_64_31 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
pynq_filters_ddiv_64ns_64ns_64_31_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_48),
    .din1(ap_const_lv64_4059000000000000),
    .ce(1'b1),
    .dout(grp_fu_35_p2)
);

pynq_filters_sitodp_32ns_64_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
pynq_filters_sitodp_32ns_64_6_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reduce_read_reg_43),
    .ce(1'b1),
    .dout(grp_fu_40_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st39_fsm_38) & ~(tmp_1_out_out_full_n == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_91)) begin
        reduce_read_reg_43 <= reduce_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st38_fsm_37)) begin
        tmp_1_i_reg_53 <= grp_fu_35_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_i_reg_48 <= grp_fu_40_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st39_fsm_38) & ~(tmp_1_out_out_full_n == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st39_fsm_38) & ~(tmp_1_out_out_full_n == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_57) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_133) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_110) begin
        ap_sig_cseq_ST_st38_fsm_37 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st38_fsm_37 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_84) begin
        ap_sig_cseq_ST_st39_fsm_38 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st39_fsm_38 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_101) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_125) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        reduce_blk_n = reduce_empty_n;
    end else begin
        reduce_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_91)) begin
        reduce_read = 1'b1;
    end else begin
        reduce_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st39_fsm_38)) begin
        tmp_1_out_out_blk_n = tmp_1_out_out_full_n;
    end else begin
        tmp_1_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st39_fsm_38) & ~(tmp_1_out_out_full_n == 1'b0))) begin
        tmp_1_out_out_write = 1'b1;
    end else begin
        tmp_1_out_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_91) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : begin
            if (~(tmp_1_out_out_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st39_fsm_38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_101 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_110 = (1'b1 == ap_CS_fsm[ap_const_lv32_25]);
end

always @ (*) begin
    ap_sig_125 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_133 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_57 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_84 = (1'b1 == ap_CS_fsm[ap_const_lv32_26]);
end

always @ (*) begin
    ap_sig_91 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (reduce_empty_n == 1'b0));
end

assign tmp_1_out_out_din = tmp_1_i_reg_53;

endmodule //pynq_filters_Block_proc208
