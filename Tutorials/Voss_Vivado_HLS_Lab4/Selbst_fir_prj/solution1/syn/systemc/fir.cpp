// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> fir::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> fir::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> fir::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<5> fir::ap_const_lv5_2 = "10";
const sc_lv<64> fir::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> fir::ap_const_lv64_1 = "1";
const sc_lv<5> fir::ap_const_lv5_14 = "10100";
const sc_lv<5> fir::ap_const_lv5_1F = "11111";
const sc_lv<5> fir::ap_const_lv5_1E = "11110";
const sc_lv<5> fir::ap_const_lv5_1 = "1";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_ap_sig_18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_61);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_18 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_46 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_61 );

    SC_METHOD(thread_exitcond_fu_97_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_i_1_fu_137_p2);
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_result_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( sum_cast_fu_109_p1 );
    sensitive << ( tmp_fu_125_p1 );

    SC_METHOD(thread_result_address1);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( sum3_cast_fu_120_p1 );

    SC_METHOD(thread_result_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_result_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_result_d0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_1_fu_130_p2 );

    SC_METHOD(thread_result_d1);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_result_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_result_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_sum3_cast_fu_120_p1);
    sensitive << ( sum3_fu_114_p2 );

    SC_METHOD(thread_sum3_fu_114_p2);
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_sum_cast_fu_109_p1);
    sensitive << ( sum_fu_103_p2 );

    SC_METHOD(thread_sum_fu_103_p2);
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_tmp_1_fu_130_p2);
    sensitive << ( result_q0 );
    sensitive << ( result_q1 );

    SC_METHOD(thread_tmp_fu_125_p1);
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_97_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, result_address0, "(port)result_address0");
    sc_trace(mVcdFile, result_ce0, "(port)result_ce0");
    sc_trace(mVcdFile, result_we0, "(port)result_we0");
    sc_trace(mVcdFile, result_d0, "(port)result_d0");
    sc_trace(mVcdFile, result_q0, "(port)result_q0");
    sc_trace(mVcdFile, result_address1, "(port)result_address1");
    sc_trace(mVcdFile, result_ce1, "(port)result_ce1");
    sc_trace(mVcdFile, result_we1, "(port)result_we1");
    sc_trace(mVcdFile, result_d1, "(port)result_d1");
    sc_trace(mVcdFile, result_q1, "(port)result_q1");
    sc_trace(mVcdFile, n, "(port)n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_18, "ap_sig_18");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_46, "ap_sig_46");
    sc_trace(mVcdFile, exitcond_fu_97_p2, "exitcond_fu_97_p2");
    sc_trace(mVcdFile, i_1_fu_137_p2, "i_1_fu_137_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_61, "ap_sig_61");
    sc_trace(mVcdFile, i_reg_85, "i_reg_85");
    sc_trace(mVcdFile, sum_cast_fu_109_p1, "sum_cast_fu_109_p1");
    sc_trace(mVcdFile, sum3_cast_fu_120_p1, "sum3_cast_fu_120_p1");
    sc_trace(mVcdFile, tmp_fu_125_p1, "tmp_fu_125_p1");
    sc_trace(mVcdFile, tmp_1_fu_130_p2, "tmp_1_fu_130_p2");
    sc_trace(mVcdFile, sum_fu_103_p2, "sum_fu_103_p2");
    sc_trace(mVcdFile, sum3_fu_114_p2, "sum3_fu_114_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        i_reg_85 = i_1_fu_137_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_85 = ap_const_lv5_2;
    }
}

void fir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_18() {
    ap_sig_18 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void fir::thread_ap_sig_46() {
    ap_sig_46 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void fir::thread_ap_sig_61() {
    ap_sig_61 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void fir::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_18.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_46.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_61.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void fir::thread_exitcond_fu_97_p2() {
    exitcond_fu_97_p2 = (!i_reg_85.read().is_01() || !ap_const_lv5_14.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_85.read() == ap_const_lv5_14);
}

void fir::thread_i_1_fu_137_p2() {
    i_1_fu_137_p2 = (!i_reg_85.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_85.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void fir::thread_result_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        result_address0 =  (sc_lv<5>) (tmp_fu_125_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        result_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        result_address0 =  (sc_lv<5>) (sum_cast_fu_109_p1.read());
    } else {
        result_address0 = "XXXXX";
    }
}

void fir::thread_result_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        result_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        result_address1 =  (sc_lv<5>) (sum3_cast_fu_120_p1.read());
    } else {
        result_address1 = "XXXXX";
    }
}

void fir::thread_result_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        result_ce0 = ap_const_logic_1;
    } else {
        result_ce0 = ap_const_logic_0;
    }
}

void fir::thread_result_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        result_ce1 = ap_const_logic_1;
    } else {
        result_ce1 = ap_const_logic_0;
    }
}

void fir::thread_result_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        result_d0 = tmp_1_fu_130_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        result_d0 = ap_const_lv32_1;
    } else {
        result_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_result_d1() {
    result_d1 = ap_const_lv32_1;
}

void fir::thread_result_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        result_we0 = ap_const_logic_1;
    } else {
        result_we0 = ap_const_logic_0;
    }
}

void fir::thread_result_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        result_we1 = ap_const_logic_1;
    } else {
        result_we1 = ap_const_logic_0;
    }
}

void fir::thread_sum3_cast_fu_120_p1() {
    sum3_cast_fu_120_p1 = esl_zext<64,5>(sum3_fu_114_p2.read());
}

void fir::thread_sum3_fu_114_p2() {
    sum3_fu_114_p2 = (!i_reg_85.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_85.read()) + sc_bigint<5>(ap_const_lv5_1E));
}

void fir::thread_sum_cast_fu_109_p1() {
    sum_cast_fu_109_p1 = esl_zext<64,5>(sum_fu_103_p2.read());
}

void fir::thread_sum_fu_103_p2() {
    sum_fu_103_p2 = (!i_reg_85.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_85.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void fir::thread_tmp_1_fu_130_p2() {
    tmp_1_fu_130_p2 = (!result_q0.read().is_01() || !result_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(result_q0.read()) + sc_biguint<32>(result_q1.read()));
}

void fir::thread_tmp_fu_125_p1() {
    tmp_fu_125_p1 = esl_zext<64,5>(i_reg_85.read());
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_address0\" :  \"" << result_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_ce0\" :  \"" << result_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_we0\" :  \"" << result_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_d0\" :  \"" << result_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"result_q0\" :  \"" << result_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_address1\" :  \"" << result_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_ce1\" :  \"" << result_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_we1\" :  \"" << result_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_d1\" :  \"" << result_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"result_q1\" :  \"" << result_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n\" :  \"" << n.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

