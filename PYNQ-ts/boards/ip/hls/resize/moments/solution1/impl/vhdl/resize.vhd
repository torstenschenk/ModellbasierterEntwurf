-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resize is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    p_src_data_V_empty_n : IN STD_LOGIC;
    p_src_data_V_read : OUT STD_LOGIC;
    p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_dst_data_V_full_n : IN STD_LOGIC;
    p_dst_data_V_write : OUT STD_LOGIC;
    xc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    yc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    anglexcomp : OUT STD_LOGIC_VECTOR (31 downto 0);
    angleycomp : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    xc_out_ap_vld : OUT STD_LOGIC;
    yc_out_ap_vld : OUT STD_LOGIC;
    anglexcomp_ap_vld : OUT STD_LOGIC;
    angleycomp_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of resize is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_ap_start : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_ap_done : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_ap_continue : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_ap_idle : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_ap_ready : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_start_out : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_start_write : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_p_src_data_V_read : STD_LOGIC;
    signal resize_Loop_1_proc59_U0_in_image_V_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal resize_Loop_1_proc59_U0_in_image_V_V_write : STD_LOGIC;
    signal xFresize60_U0_ap_start : STD_LOGIC;
    signal xFresize60_U0_ap_done : STD_LOGIC;
    signal xFresize60_U0_ap_continue : STD_LOGIC;
    signal xFresize60_U0_ap_idle : STD_LOGIC;
    signal xFresize60_U0_ap_ready : STD_LOGIC;
    signal xFresize60_U0_start_out : STD_LOGIC;
    signal xFresize60_U0_start_write : STD_LOGIC;
    signal xFresize60_U0_p_in_mat_V_V_read : STD_LOGIC;
    signal xFresize60_U0_p_out_mat_V_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal xFresize60_U0_p_out_mat_V_V_write : STD_LOGIC;
    signal xFresize60_U0_xc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal xFresize60_U0_xc_out_ap_vld : STD_LOGIC;
    signal xFresize60_U0_yc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal xFresize60_U0_yc_out_ap_vld : STD_LOGIC;
    signal xFresize60_U0_anglexcomp : STD_LOGIC_VECTOR (31 downto 0);
    signal xFresize60_U0_anglexcomp_ap_vld : STD_LOGIC;
    signal xFresize60_U0_angleycomp : STD_LOGIC_VECTOR (31 downto 0);
    signal xFresize60_U0_angleycomp_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_ap_start : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_ap_done : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_ap_continue : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_ap_idle : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_ap_ready : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_out_image_V_V_read : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal resize_Loop_2_proc61_U0_p_dst_data_V_write : STD_LOGIC;
    signal in_image_V_V_full_n : STD_LOGIC;
    signal in_image_V_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal in_image_V_V_empty_n : STD_LOGIC;
    signal out_image_V_V_full_n : STD_LOGIC;
    signal out_image_V_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal out_image_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_xFresize60_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFresize60_U0_full_n : STD_LOGIC;
    signal start_for_xFresize60_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFresize60_U0_empty_n : STD_LOGIC;
    signal start_for_resize_Loop_2_proc61_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resize_Loop_2_proc61_U0_full_n : STD_LOGIC;
    signal start_for_resize_Loop_2_proc61_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resize_Loop_2_proc61_U0_empty_n : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_start_full_n : STD_LOGIC;
    signal resize_Loop_2_proc61_U0_start_write : STD_LOGIC;

    component resize_Loop_1_proc59 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        in_image_V_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        in_image_V_V_full_n : IN STD_LOGIC;
        in_image_V_V_write : OUT STD_LOGIC );
    end component;


    component xFresize60 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_in_mat_V_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_in_mat_V_V_empty_n : IN STD_LOGIC;
        p_in_mat_V_V_read : OUT STD_LOGIC;
        p_out_mat_V_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_out_mat_V_V_full_n : IN STD_LOGIC;
        p_out_mat_V_V_write : OUT STD_LOGIC;
        xc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        xc_out_ap_vld : OUT STD_LOGIC;
        yc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        yc_out_ap_vld : OUT STD_LOGIC;
        anglexcomp : OUT STD_LOGIC_VECTOR (31 downto 0);
        anglexcomp_ap_vld : OUT STD_LOGIC;
        angleycomp : OUT STD_LOGIC_VECTOR (31 downto 0);
        angleycomp_ap_vld : OUT STD_LOGIC );
    end component;


    component resize_Loop_2_proc61 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_image_V_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        out_image_V_V_empty_n : IN STD_LOGIC;
        out_image_V_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w24_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFresize60_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_resize_Loop_2_proc61_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    resize_Loop_1_proc59_U0 : component resize_Loop_1_proc59
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => resize_Loop_1_proc59_U0_ap_start,
        start_full_n => start_for_xFresize60_U0_full_n,
        ap_done => resize_Loop_1_proc59_U0_ap_done,
        ap_continue => resize_Loop_1_proc59_U0_ap_continue,
        ap_idle => resize_Loop_1_proc59_U0_ap_idle,
        ap_ready => resize_Loop_1_proc59_U0_ap_ready,
        start_out => resize_Loop_1_proc59_U0_start_out,
        start_write => resize_Loop_1_proc59_U0_start_write,
        p_src_data_V_dout => p_src_data_V_dout,
        p_src_data_V_empty_n => p_src_data_V_empty_n,
        p_src_data_V_read => resize_Loop_1_proc59_U0_p_src_data_V_read,
        in_image_V_V_din => resize_Loop_1_proc59_U0_in_image_V_V_din,
        in_image_V_V_full_n => in_image_V_V_full_n,
        in_image_V_V_write => resize_Loop_1_proc59_U0_in_image_V_V_write);

    xFresize60_U0 : component xFresize60
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFresize60_U0_ap_start,
        start_full_n => start_for_resize_Loop_2_proc61_U0_full_n,
        ap_done => xFresize60_U0_ap_done,
        ap_continue => xFresize60_U0_ap_continue,
        ap_idle => xFresize60_U0_ap_idle,
        ap_ready => xFresize60_U0_ap_ready,
        start_out => xFresize60_U0_start_out,
        start_write => xFresize60_U0_start_write,
        p_in_mat_V_V_dout => in_image_V_V_dout,
        p_in_mat_V_V_empty_n => in_image_V_V_empty_n,
        p_in_mat_V_V_read => xFresize60_U0_p_in_mat_V_V_read,
        p_out_mat_V_V_din => xFresize60_U0_p_out_mat_V_V_din,
        p_out_mat_V_V_full_n => out_image_V_V_full_n,
        p_out_mat_V_V_write => xFresize60_U0_p_out_mat_V_V_write,
        xc_out => xFresize60_U0_xc_out,
        xc_out_ap_vld => xFresize60_U0_xc_out_ap_vld,
        yc_out => xFresize60_U0_yc_out,
        yc_out_ap_vld => xFresize60_U0_yc_out_ap_vld,
        anglexcomp => xFresize60_U0_anglexcomp,
        anglexcomp_ap_vld => xFresize60_U0_anglexcomp_ap_vld,
        angleycomp => xFresize60_U0_angleycomp,
        angleycomp_ap_vld => xFresize60_U0_angleycomp_ap_vld);

    resize_Loop_2_proc61_U0 : component resize_Loop_2_proc61
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => resize_Loop_2_proc61_U0_ap_start,
        ap_done => resize_Loop_2_proc61_U0_ap_done,
        ap_continue => resize_Loop_2_proc61_U0_ap_continue,
        ap_idle => resize_Loop_2_proc61_U0_ap_idle,
        ap_ready => resize_Loop_2_proc61_U0_ap_ready,
        out_image_V_V_dout => out_image_V_V_dout,
        out_image_V_V_empty_n => out_image_V_V_empty_n,
        out_image_V_V_read => resize_Loop_2_proc61_U0_out_image_V_V_read,
        p_dst_data_V_din => resize_Loop_2_proc61_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => p_dst_data_V_full_n,
        p_dst_data_V_write => resize_Loop_2_proc61_U0_p_dst_data_V_write);

    in_image_V_V_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => resize_Loop_1_proc59_U0_in_image_V_V_din,
        if_full_n => in_image_V_V_full_n,
        if_write => resize_Loop_1_proc59_U0_in_image_V_V_write,
        if_dout => in_image_V_V_dout,
        if_empty_n => in_image_V_V_empty_n,
        if_read => xFresize60_U0_p_in_mat_V_V_read);

    out_image_V_V_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFresize60_U0_p_out_mat_V_V_din,
        if_full_n => out_image_V_V_full_n,
        if_write => xFresize60_U0_p_out_mat_V_V_write,
        if_dout => out_image_V_V_dout,
        if_empty_n => out_image_V_V_empty_n,
        if_read => resize_Loop_2_proc61_U0_out_image_V_V_read);

    start_for_xFresize60_U0_U : component start_for_xFresize60_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFresize60_U0_din,
        if_full_n => start_for_xFresize60_U0_full_n,
        if_write => resize_Loop_1_proc59_U0_start_write,
        if_dout => start_for_xFresize60_U0_dout,
        if_empty_n => start_for_xFresize60_U0_empty_n,
        if_read => xFresize60_U0_ap_ready);

    start_for_resize_Loop_2_proc61_U0_U : component start_for_resize_Loop_2_proc61_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_resize_Loop_2_proc61_U0_din,
        if_full_n => start_for_resize_Loop_2_proc61_U0_full_n,
        if_write => xFresize60_U0_start_write,
        if_dout => start_for_resize_Loop_2_proc61_U0_dout,
        if_empty_n => start_for_resize_Loop_2_proc61_U0_empty_n,
        if_read => resize_Loop_2_proc61_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    anglexcomp <= xFresize60_U0_anglexcomp;
    anglexcomp_ap_vld <= xFresize60_U0_anglexcomp_ap_vld;
    angleycomp <= xFresize60_U0_angleycomp;
    angleycomp_ap_vld <= xFresize60_U0_angleycomp_ap_vld;
    ap_done <= ap_sync_done;
    ap_idle <= (xFresize60_U0_ap_idle and resize_Loop_2_proc61_U0_ap_idle and resize_Loop_1_proc59_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (xFresize60_U0_ap_done and resize_Loop_2_proc61_U0_ap_done);
    ap_sync_ready <= resize_Loop_1_proc59_U0_ap_ready;
    internal_ap_ready <= ap_sync_ready;
    p_dst_data_V_din <= resize_Loop_2_proc61_U0_p_dst_data_V_din;
    p_dst_data_V_write <= resize_Loop_2_proc61_U0_p_dst_data_V_write;
    p_src_data_V_read <= resize_Loop_1_proc59_U0_p_src_data_V_read;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    resize_Loop_1_proc59_U0_ap_continue <= ap_const_logic_1;
    resize_Loop_1_proc59_U0_ap_start <= real_start;
    resize_Loop_2_proc61_U0_ap_continue <= ap_sync_continue;
    resize_Loop_2_proc61_U0_ap_start <= start_for_resize_Loop_2_proc61_U0_empty_n;
    resize_Loop_2_proc61_U0_start_full_n <= ap_const_logic_1;
    resize_Loop_2_proc61_U0_start_write <= ap_const_logic_0;
    start_for_resize_Loop_2_proc61_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFresize60_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    xFresize60_U0_ap_continue <= ap_sync_continue;
    xFresize60_U0_ap_start <= start_for_xFresize60_U0_empty_n;
    xc_out <= xFresize60_U0_xc_out;
    xc_out_ap_vld <= xFresize60_U0_xc_out_ap_vld;
    yc_out <= xFresize60_U0_yc_out;
    yc_out_ap_vld <= xFresize60_U0_yc_out_ap_vld;
end behav;
