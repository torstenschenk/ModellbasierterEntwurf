// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module axis2xfMat (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_src_data_V_din,
        p_src_data_V_full_n,
        p_src_data_V_write,
        src_TDATA,
        src_TVALID,
        src_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [23:0] p_src_data_V_din;
input   p_src_data_V_full_n;
output   p_src_data_V_write;
input  [23:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_src_data_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] src_data_V_0_data_out;
wire    src_data_V_0_vld_in;
wire    src_data_V_0_vld_out;
wire    src_data_V_0_ack_in;
reg    src_data_V_0_ack_out;
reg   [23:0] src_data_V_0_payload_A;
reg   [23:0] src_data_V_0_payload_B;
reg    src_data_V_0_sel_rd;
reg    src_data_V_0_sel_wr;
wire    src_data_V_0_sel;
wire    src_data_V_0_load_A;
wire    src_data_V_0_load_B;
reg   [1:0] src_data_V_0_state;
wire    src_data_V_0_state_cmp_full;
reg    p_src_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_124;
reg    src_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_103_p2;
reg   [9:0] j_reg_80;
wire   [0:0] exitcond1_fu_91_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] i_3_fu_97_p2;
reg   [8:0] i_3_reg_119;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] j_3_fu_109_p2;
reg   [23:0] src_data_V_read_reg_133;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [8:0] i_reg_69;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 src_data_V_0_sel_rd = 1'b0;
#0 src_data_V_0_sel_wr = 1'b0;
#0 src_data_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond1_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_data_V_0_ack_out == 1'b1) & (src_data_V_0_vld_out == 1'b1))) begin
            src_data_V_0_sel_rd <= ~src_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_data_V_0_ack_in == 1'b1) & (src_data_V_0_vld_in == 1'b1))) begin
            src_data_V_0_sel_wr <= ~src_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_data_V_0_state == 2'd2) & (src_data_V_0_vld_in == 1'b0)) | ((src_data_V_0_state == 2'd3) & (src_data_V_0_vld_in == 1'b0) & (src_data_V_0_ack_out == 1'b1)))) begin
            src_data_V_0_state <= 2'd2;
        end else if ((((src_data_V_0_state == 2'd1) & (src_data_V_0_ack_out == 1'b0)) | ((src_data_V_0_state == 2'd3) & (src_data_V_0_ack_out == 1'b0) & (src_data_V_0_vld_in == 1'b1)))) begin
            src_data_V_0_state <= 2'd1;
        end else if (((~((src_data_V_0_vld_in == 1'b0) & (src_data_V_0_ack_out == 1'b1)) & ~((src_data_V_0_ack_out == 1'b0) & (src_data_V_0_vld_in == 1'b1)) & (src_data_V_0_state == 2'd3)) | ((src_data_V_0_state == 2'd1) & (src_data_V_0_ack_out == 1'b1)) | ((src_data_V_0_state == 2'd2) & (src_data_V_0_vld_in == 1'b1)))) begin
            src_data_V_0_state <= 2'd3;
        end else begin
            src_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_69 <= i_3_reg_119;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_69 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_80 <= 10'd0;
    end else if (((exitcond_fu_103_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_80 <= j_3_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_124 <= exitcond_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_119 <= i_3_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((src_data_V_0_load_A == 1'b1)) begin
        src_data_V_0_payload_A <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_data_V_0_load_B == 1'b1)) begin
        src_data_V_0_payload_B <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_V_read_reg_133 <= src_data_V_0_data_out;
    end
end

always @ (*) begin
    if ((exitcond_fu_103_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_124 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        p_src_data_V_blk_n = p_src_data_V_full_n;
    end else begin
        p_src_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_124 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_V_write = 1'b1;
    end else begin
        p_src_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((exitcond_fu_103_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_TDATA_blk_n = src_data_V_0_state[1'd0];
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_103_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_V_0_ack_out = 1'b1;
    end else begin
        src_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_data_V_0_sel == 1'b1)) begin
        src_data_V_0_data_out = src_data_V_0_payload_B;
    end else begin
        src_data_V_0_data_out = src_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_fu_103_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_fu_103_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_fu_103_p2 == 1'd0) & (src_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_reg_124 == 1'd0) & (p_src_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_fu_103_p2 == 1'd0) & (src_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_reg_124 == 1'd0) & (p_src_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_fu_103_p2 == 1'd0) & (src_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_reg_124 == 1'd0) & (p_src_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((exitcond_fu_103_p2 == 1'd0) & (src_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_reg_124 == 1'd0) & (p_src_data_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond1_fu_91_p2 = ((i_reg_69 == 9'd360) ? 1'b1 : 1'b0);

assign exitcond_fu_103_p2 = ((j_reg_80 == 10'd640) ? 1'b1 : 1'b0);

assign i_3_fu_97_p2 = (i_reg_69 + 9'd1);

assign j_3_fu_109_p2 = (j_reg_80 + 10'd1);

assign p_src_data_V_din = src_data_V_read_reg_133;

assign src_TREADY = src_data_V_0_state[1'd1];

assign src_data_V_0_ack_in = src_data_V_0_state[1'd1];

assign src_data_V_0_load_A = (src_data_V_0_state_cmp_full & ~src_data_V_0_sel_wr);

assign src_data_V_0_load_B = (src_data_V_0_state_cmp_full & src_data_V_0_sel_wr);

assign src_data_V_0_sel = src_data_V_0_sel_rd;

assign src_data_V_0_state_cmp_full = ((src_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_data_V_0_vld_in = src_TVALID;

assign src_data_V_0_vld_out = src_data_V_0_state[1'd0];

assign start_out = real_start;

endmodule //axis2xfMat
