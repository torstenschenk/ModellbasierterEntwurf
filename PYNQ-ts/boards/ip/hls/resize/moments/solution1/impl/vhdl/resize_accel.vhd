-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resize_accel is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC );
end;


architecture behav of resize_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "resize_accel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=494821,HLS_SYN_TPT=494821,HLS_SYN_MEM=37,HLS_SYN_DSP=118,HLS_SYN_FF=13765,HLS_SYN_LUT=16015,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal inval : STD_LOGIC_VECTOR (31 downto 0);
    signal axis2xfMat_U0_ap_start : STD_LOGIC;
    signal axis2xfMat_U0_ap_done : STD_LOGIC;
    signal axis2xfMat_U0_ap_continue : STD_LOGIC;
    signal axis2xfMat_U0_ap_idle : STD_LOGIC;
    signal axis2xfMat_U0_ap_ready : STD_LOGIC;
    signal axis2xfMat_U0_start_out : STD_LOGIC;
    signal axis2xfMat_U0_start_write : STD_LOGIC;
    signal axis2xfMat_U0_p_src_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal axis2xfMat_U0_p_src_data_V_write : STD_LOGIC;
    signal axis2xfMat_U0_src_TREADY : STD_LOGIC;
    signal resize_U0_ap_start : STD_LOGIC;
    signal resize_U0_start_out : STD_LOGIC;
    signal resize_U0_start_write : STD_LOGIC;
    signal resize_U0_p_src_data_V_read : STD_LOGIC;
    signal resize_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal resize_U0_p_dst_data_V_write : STD_LOGIC;
    signal resize_U0_xc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal resize_U0_yc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal resize_U0_anglexcomp : STD_LOGIC_VECTOR (31 downto 0);
    signal resize_U0_angleycomp : STD_LOGIC_VECTOR (31 downto 0);
    signal resize_U0_xc_out_ap_vld : STD_LOGIC;
    signal resize_U0_yc_out_ap_vld : STD_LOGIC;
    signal resize_U0_anglexcomp_ap_vld : STD_LOGIC;
    signal resize_U0_angleycomp_ap_vld : STD_LOGIC;
    signal resize_U0_ap_done : STD_LOGIC;
    signal resize_U0_ap_ready : STD_LOGIC;
    signal resize_U0_ap_idle : STD_LOGIC;
    signal resize_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal xfMat2axis_U0_ap_start : STD_LOGIC;
    signal xfMat2axis_U0_ap_done : STD_LOGIC;
    signal xfMat2axis_U0_ap_continue : STD_LOGIC;
    signal xfMat2axis_U0_ap_idle : STD_LOGIC;
    signal xfMat2axis_U0_ap_ready : STD_LOGIC;
    signal xfMat2axis_U0_p_dst_data_V_read : STD_LOGIC;
    signal xfMat2axis_U0_dst_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal xfMat2axis_U0_dst_TVALID : STD_LOGIC;
    signal xfMat2axis_U0_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_data_V_full_n : STD_LOGIC;
    signal p_src_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal p_src_data_V_empty_n : STD_LOGIC;
    signal p_dst_data_V_full_n : STD_LOGIC;
    signal p_dst_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal p_dst_data_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_resize_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resize_U0_full_n : STD_LOGIC;
    signal start_for_resize_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resize_U0_empty_n : STD_LOGIC;
    signal start_for_xfMat2axis_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2axis_U0_full_n : STD_LOGIC;
    signal start_for_xfMat2axis_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2axis_U0_empty_n : STD_LOGIC;
    signal xfMat2axis_U0_start_full_n : STD_LOGIC;
    signal xfMat2axis_U0_start_write : STD_LOGIC;

    component axis2xfMat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_full_n : IN STD_LOGIC;
        p_src_data_V_write : OUT STD_LOGIC;
        src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        src_TVALID : IN STD_LOGIC;
        src_TREADY : OUT STD_LOGIC );
    end component;


    component resize IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC;
        xc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        yc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        anglexcomp : OUT STD_LOGIC_VECTOR (31 downto 0);
        angleycomp : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        xc_out_ap_vld : OUT STD_LOGIC;
        yc_out_ap_vld : OUT STD_LOGIC;
        anglexcomp_ap_vld : OUT STD_LOGIC;
        angleycomp_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component xfMat2axis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_dst_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_dst_data_V_empty_n : IN STD_LOGIC;
        p_dst_data_V_read : OUT STD_LOGIC;
        dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        dst_TVALID : OUT STD_LOGIC;
        dst_TREADY : IN STD_LOGIC;
        dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w24_d150_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_resize_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xfMat2axis_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component resize_accel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inval : OUT STD_LOGIC_VECTOR (31 downto 0);
        xc_out : IN STD_LOGIC_VECTOR (31 downto 0);
        xc_out_ap_vld : IN STD_LOGIC;
        yc_out : IN STD_LOGIC_VECTOR (31 downto 0);
        yc_out_ap_vld : IN STD_LOGIC;
        anglexcomp : IN STD_LOGIC_VECTOR (31 downto 0);
        anglexcomp_ap_vld : IN STD_LOGIC;
        angleycomp : IN STD_LOGIC_VECTOR (31 downto 0);
        angleycomp_ap_vld : IN STD_LOGIC );
    end component;



begin
    resize_accel_AXILiteS_s_axi_U : component resize_accel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inval => inval,
        xc_out => resize_U0_xc_out,
        xc_out_ap_vld => resize_U0_xc_out_ap_vld,
        yc_out => resize_U0_yc_out,
        yc_out_ap_vld => resize_U0_yc_out_ap_vld,
        anglexcomp => resize_U0_anglexcomp,
        anglexcomp_ap_vld => resize_U0_anglexcomp_ap_vld,
        angleycomp => resize_U0_angleycomp,
        angleycomp_ap_vld => resize_U0_angleycomp_ap_vld);

    axis2xfMat_U0 : component axis2xfMat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => axis2xfMat_U0_ap_start,
        start_full_n => start_for_resize_U0_full_n,
        ap_done => axis2xfMat_U0_ap_done,
        ap_continue => axis2xfMat_U0_ap_continue,
        ap_idle => axis2xfMat_U0_ap_idle,
        ap_ready => axis2xfMat_U0_ap_ready,
        start_out => axis2xfMat_U0_start_out,
        start_write => axis2xfMat_U0_start_write,
        p_src_data_V_din => axis2xfMat_U0_p_src_data_V_din,
        p_src_data_V_full_n => p_src_data_V_full_n,
        p_src_data_V_write => axis2xfMat_U0_p_src_data_V_write,
        src_TDATA => src_TDATA,
        src_TVALID => src_TVALID,
        src_TREADY => axis2xfMat_U0_src_TREADY);

    resize_U0 : component resize
    port map (
        ap_start => resize_U0_ap_start,
        start_full_n => start_for_xfMat2axis_U0_full_n,
        start_out => resize_U0_start_out,
        start_write => resize_U0_start_write,
        p_src_data_V_dout => p_src_data_V_dout,
        p_src_data_V_empty_n => p_src_data_V_empty_n,
        p_src_data_V_read => resize_U0_p_src_data_V_read,
        p_dst_data_V_din => resize_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => p_dst_data_V_full_n,
        p_dst_data_V_write => resize_U0_p_dst_data_V_write,
        xc_out => resize_U0_xc_out,
        yc_out => resize_U0_yc_out,
        anglexcomp => resize_U0_anglexcomp,
        angleycomp => resize_U0_angleycomp,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        xc_out_ap_vld => resize_U0_xc_out_ap_vld,
        yc_out_ap_vld => resize_U0_yc_out_ap_vld,
        anglexcomp_ap_vld => resize_U0_anglexcomp_ap_vld,
        angleycomp_ap_vld => resize_U0_angleycomp_ap_vld,
        ap_done => resize_U0_ap_done,
        ap_ready => resize_U0_ap_ready,
        ap_idle => resize_U0_ap_idle,
        ap_continue => resize_U0_ap_continue);

    xfMat2axis_U0 : component xfMat2axis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2axis_U0_ap_start,
        ap_done => xfMat2axis_U0_ap_done,
        ap_continue => xfMat2axis_U0_ap_continue,
        ap_idle => xfMat2axis_U0_ap_idle,
        ap_ready => xfMat2axis_U0_ap_ready,
        p_dst_data_V_dout => p_dst_data_V_dout,
        p_dst_data_V_empty_n => p_dst_data_V_empty_n,
        p_dst_data_V_read => xfMat2axis_U0_p_dst_data_V_read,
        dst_TDATA => xfMat2axis_U0_dst_TDATA,
        dst_TVALID => xfMat2axis_U0_dst_TVALID,
        dst_TREADY => dst_TREADY,
        dst_TLAST => xfMat2axis_U0_dst_TLAST);

    p_src_data_V_U : component fifo_w24_d150_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => axis2xfMat_U0_p_src_data_V_din,
        if_full_n => p_src_data_V_full_n,
        if_write => axis2xfMat_U0_p_src_data_V_write,
        if_dout => p_src_data_V_dout,
        if_empty_n => p_src_data_V_empty_n,
        if_read => resize_U0_p_src_data_V_read);

    p_dst_data_V_U : component fifo_w24_d150_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => resize_U0_p_dst_data_V_din,
        if_full_n => p_dst_data_V_full_n,
        if_write => resize_U0_p_dst_data_V_write,
        if_dout => p_dst_data_V_dout,
        if_empty_n => p_dst_data_V_empty_n,
        if_read => xfMat2axis_U0_p_dst_data_V_read);

    start_for_resize_U0_U : component start_for_resize_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_resize_U0_din,
        if_full_n => start_for_resize_U0_full_n,
        if_write => axis2xfMat_U0_start_write,
        if_dout => start_for_resize_U0_dout,
        if_empty_n => start_for_resize_U0_empty_n,
        if_read => resize_U0_ap_ready);

    start_for_xfMat2axis_U0_U : component start_for_xfMat2axis_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xfMat2axis_U0_din,
        if_full_n => start_for_xfMat2axis_U0_full_n,
        if_write => resize_U0_start_write,
        if_dout => start_for_xfMat2axis_U0_dout,
        if_empty_n => start_for_xfMat2axis_U0_empty_n,
        if_read => xfMat2axis_U0_ap_ready);




    ap_done <= ap_sync_done;
    ap_idle <= (xfMat2axis_U0_ap_idle and resize_U0_ap_idle and axis2xfMat_U0_ap_idle);
    ap_ready <= axis2xfMat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (xfMat2axis_U0_ap_done and resize_U0_ap_done);
    ap_sync_ready <= axis2xfMat_U0_ap_ready;
    axis2xfMat_U0_ap_continue <= ap_const_logic_1;
    axis2xfMat_U0_ap_start <= ap_start;
    dst_TDATA <= xfMat2axis_U0_dst_TDATA;
    dst_TLAST <= xfMat2axis_U0_dst_TLAST;
    dst_TVALID <= xfMat2axis_U0_dst_TVALID;
    resize_U0_ap_continue <= ap_sync_done;
    resize_U0_ap_start <= start_for_resize_U0_empty_n;
    src_TREADY <= axis2xfMat_U0_src_TREADY;
    start_for_resize_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xfMat2axis_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xfMat2axis_U0_ap_continue <= ap_sync_done;
    xfMat2axis_U0_ap_start <= start_for_xfMat2axis_U0_empty_n;
    xfMat2axis_U0_start_full_n <= ap_const_logic_1;
    xfMat2axis_U0_start_write <= ap_const_logic_0;
end behav;
