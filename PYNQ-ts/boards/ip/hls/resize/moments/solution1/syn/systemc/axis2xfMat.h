// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _axis2xfMat_HH_
#define _axis2xfMat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct axis2xfMat : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<24> > p_src_data_V_din;
    sc_in< sc_logic > p_src_data_V_full_n;
    sc_out< sc_logic > p_src_data_V_write;
    sc_in< sc_lv<24> > src_TDATA;
    sc_in< sc_logic > src_TVALID;
    sc_out< sc_logic > src_TREADY;


    // Module declarations
    axis2xfMat(sc_module_name name);
    SC_HAS_PROCESS(axis2xfMat);

    ~axis2xfMat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > src_data_V_0_data_out;
    sc_signal< sc_logic > src_data_V_0_vld_in;
    sc_signal< sc_logic > src_data_V_0_vld_out;
    sc_signal< sc_logic > src_data_V_0_ack_in;
    sc_signal< sc_logic > src_data_V_0_ack_out;
    sc_signal< sc_lv<24> > src_data_V_0_payload_A;
    sc_signal< sc_lv<24> > src_data_V_0_payload_B;
    sc_signal< sc_logic > src_data_V_0_sel_rd;
    sc_signal< sc_logic > src_data_V_0_sel_wr;
    sc_signal< sc_logic > src_data_V_0_sel;
    sc_signal< sc_logic > src_data_V_0_load_A;
    sc_signal< sc_logic > src_data_V_0_load_B;
    sc_signal< sc_lv<2> > src_data_V_0_state;
    sc_signal< sc_logic > src_data_V_0_state_cmp_full;
    sc_signal< sc_logic > p_src_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_124;
    sc_signal< sc_logic > src_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > exitcond_fu_103_p2;
    sc_signal< sc_lv<10> > j_reg_80;
    sc_signal< sc_lv<1> > exitcond1_fu_91_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > i_3_fu_97_p2;
    sc_signal< sc_lv<9> > i_3_reg_119;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > j_3_fu_109_p2;
    sc_signal< sc_lv<24> > src_data_V_read_reg_133;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<9> > i_reg_69;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<9> ap_const_lv9_168;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<10> ap_const_lv10_280;
    static const sc_lv<10> ap_const_lv10_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond1_fu_91_p2();
    void thread_exitcond_fu_103_p2();
    void thread_i_3_fu_97_p2();
    void thread_internal_ap_ready();
    void thread_j_3_fu_109_p2();
    void thread_p_src_data_V_blk_n();
    void thread_p_src_data_V_din();
    void thread_p_src_data_V_write();
    void thread_real_start();
    void thread_src_TDATA_blk_n();
    void thread_src_TREADY();
    void thread_src_data_V_0_ack_in();
    void thread_src_data_V_0_ack_out();
    void thread_src_data_V_0_data_out();
    void thread_src_data_V_0_load_A();
    void thread_src_data_V_0_load_B();
    void thread_src_data_V_0_sel();
    void thread_src_data_V_0_state_cmp_full();
    void thread_src_data_V_0_vld_in();
    void thread_src_data_V_0_vld_out();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
