// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _resize_accel_HH_
#define _resize_accel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "axis2xfMat.h"
#include "resize.h"
#include "xfMat2axis.h"
#include "fifo_w24_d150_A.h"
#include "start_for_resize_U0.h"
#include "start_for_xfMat2axis_U0.h"
#include "resize_accel_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct resize_accel : public sc_module {
    // Port declarations 28
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<24> > src_TDATA;
    sc_in< sc_lv<1> > src_TLAST;
    sc_out< sc_lv<24> > dst_TDATA;
    sc_out< sc_lv<1> > dst_TLAST;
    sc_in< sc_logic > src_TVALID;
    sc_out< sc_logic > src_TREADY;
    sc_out< sc_logic > dst_TVALID;
    sc_in< sc_logic > dst_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    resize_accel(sc_module_name name);
    SC_HAS_PROCESS(resize_accel);

    ~resize_accel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    resize_accel_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* resize_accel_AXILiteS_s_axi_U;
    axis2xfMat* axis2xfMat_U0;
    resize* resize_U0;
    xfMat2axis* xfMat2axis_U0;
    fifo_w24_d150_A* p_src_data_V_U;
    fifo_w24_d150_A* p_dst_data_V_U;
    start_for_resize_U0* start_for_resize_U0_U;
    start_for_xfMat2axis_U0* start_for_xfMat2axis_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > inval;
    sc_signal< sc_logic > axis2xfMat_U0_ap_start;
    sc_signal< sc_logic > axis2xfMat_U0_ap_done;
    sc_signal< sc_logic > axis2xfMat_U0_ap_continue;
    sc_signal< sc_logic > axis2xfMat_U0_ap_idle;
    sc_signal< sc_logic > axis2xfMat_U0_ap_ready;
    sc_signal< sc_logic > axis2xfMat_U0_start_out;
    sc_signal< sc_logic > axis2xfMat_U0_start_write;
    sc_signal< sc_lv<24> > axis2xfMat_U0_p_src_data_V_din;
    sc_signal< sc_logic > axis2xfMat_U0_p_src_data_V_write;
    sc_signal< sc_logic > axis2xfMat_U0_src_TREADY;
    sc_signal< sc_logic > resize_U0_ap_start;
    sc_signal< sc_logic > resize_U0_start_out;
    sc_signal< sc_logic > resize_U0_start_write;
    sc_signal< sc_logic > resize_U0_p_src_data_V_read;
    sc_signal< sc_lv<24> > resize_U0_p_dst_data_V_din;
    sc_signal< sc_logic > resize_U0_p_dst_data_V_write;
    sc_signal< sc_lv<32> > resize_U0_xc_out;
    sc_signal< sc_lv<32> > resize_U0_yc_out;
    sc_signal< sc_lv<32> > resize_U0_anglexcomp;
    sc_signal< sc_lv<32> > resize_U0_angleycomp;
    sc_signal< sc_logic > resize_U0_xc_out_ap_vld;
    sc_signal< sc_logic > resize_U0_yc_out_ap_vld;
    sc_signal< sc_logic > resize_U0_anglexcomp_ap_vld;
    sc_signal< sc_logic > resize_U0_angleycomp_ap_vld;
    sc_signal< sc_logic > resize_U0_ap_done;
    sc_signal< sc_logic > resize_U0_ap_ready;
    sc_signal< sc_logic > resize_U0_ap_idle;
    sc_signal< sc_logic > resize_U0_ap_continue;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > xfMat2axis_U0_ap_start;
    sc_signal< sc_logic > xfMat2axis_U0_ap_done;
    sc_signal< sc_logic > xfMat2axis_U0_ap_continue;
    sc_signal< sc_logic > xfMat2axis_U0_ap_idle;
    sc_signal< sc_logic > xfMat2axis_U0_ap_ready;
    sc_signal< sc_logic > xfMat2axis_U0_p_dst_data_V_read;
    sc_signal< sc_lv<24> > xfMat2axis_U0_dst_TDATA;
    sc_signal< sc_logic > xfMat2axis_U0_dst_TVALID;
    sc_signal< sc_lv<1> > xfMat2axis_U0_dst_TLAST;
    sc_signal< sc_logic > p_src_data_V_full_n;
    sc_signal< sc_lv<24> > p_src_data_V_dout;
    sc_signal< sc_logic > p_src_data_V_empty_n;
    sc_signal< sc_logic > p_dst_data_V_full_n;
    sc_signal< sc_lv<24> > p_dst_data_V_dout;
    sc_signal< sc_logic > p_dst_data_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_resize_U0_din;
    sc_signal< sc_logic > start_for_resize_U0_full_n;
    sc_signal< sc_lv<1> > start_for_resize_U0_dout;
    sc_signal< sc_logic > start_for_resize_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_xfMat2axis_U0_din;
    sc_signal< sc_logic > start_for_xfMat2axis_U0_full_n;
    sc_signal< sc_lv<1> > start_for_xfMat2axis_U0_dout;
    sc_signal< sc_logic > start_for_xfMat2axis_U0_empty_n;
    sc_signal< sc_logic > xfMat2axis_U0_start_full_n;
    sc_signal< sc_logic > xfMat2axis_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_axis2xfMat_U0_ap_continue();
    void thread_axis2xfMat_U0_ap_start();
    void thread_dst_TDATA();
    void thread_dst_TLAST();
    void thread_dst_TVALID();
    void thread_resize_U0_ap_continue();
    void thread_resize_U0_ap_start();
    void thread_src_TREADY();
    void thread_start_for_resize_U0_din();
    void thread_start_for_xfMat2axis_U0_din();
    void thread_xfMat2axis_U0_ap_continue();
    void thread_xfMat2axis_U0_ap_start();
    void thread_xfMat2axis_U0_start_full_n();
    void thread_xfMat2axis_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
