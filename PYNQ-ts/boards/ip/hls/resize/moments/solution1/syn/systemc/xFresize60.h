// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xFresize60_HH_
#define _xFresize60_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "xFResizeAreaDownScal.h"

namespace ap_rtl {

struct xFresize60 : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > p_in_mat_V_V_dout;
    sc_in< sc_logic > p_in_mat_V_V_empty_n;
    sc_out< sc_logic > p_in_mat_V_V_read;
    sc_out< sc_lv<24> > p_out_mat_V_V_din;
    sc_in< sc_logic > p_out_mat_V_V_full_n;
    sc_out< sc_logic > p_out_mat_V_V_write;
    sc_out< sc_lv<32> > xc_out;
    sc_out< sc_logic > xc_out_ap_vld;
    sc_out< sc_lv<32> > yc_out;
    sc_out< sc_logic > yc_out_ap_vld;
    sc_out< sc_lv<32> > anglexcomp;
    sc_out< sc_logic > anglexcomp_ap_vld;
    sc_out< sc_lv<32> > angleycomp;
    sc_out< sc_logic > angleycomp_ap_vld;


    // Module declarations
    xFresize60(sc_module_name name);
    SC_HAS_PROCESS(xFresize60);

    ~xFresize60();

    sc_trace_file* mVcdFile;

    xFResizeAreaDownScal* grp_xFResizeAreaDownScal_fu_60;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_ap_start;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_ap_done;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_ap_idle;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_ap_ready;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_stream_in_V_V_read;
    sc_signal< sc_lv<24> > grp_xFResizeAreaDownScal_fu_60_resize_out_V_V_din;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_resize_out_V_V_write;
    sc_signal< sc_lv<32> > grp_xFResizeAreaDownScal_fu_60_ap_return_0;
    sc_signal< sc_lv<32> > grp_xFResizeAreaDownScal_fu_60_ap_return_1;
    sc_signal< sc_lv<32> > grp_xFResizeAreaDownScal_fu_60_ap_return_2;
    sc_signal< sc_lv<32> > grp_xFResizeAreaDownScal_fu_60_ap_return_3;
    sc_signal< sc_logic > grp_xFResizeAreaDownScal_fu_60_ap_start_reg;
    sc_signal< bool > ap_block_state1_ignore_call2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_block_state1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_anglexcomp();
    void thread_anglexcomp_ap_vld();
    void thread_angleycomp();
    void thread_angleycomp_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state1_ignore_call2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_xFResizeAreaDownScal_fu_60_ap_start();
    void thread_internal_ap_ready();
    void thread_p_in_mat_V_V_read();
    void thread_p_out_mat_V_V_din();
    void thread_p_out_mat_V_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_xc_out();
    void thread_xc_out_ap_vld();
    void thread_yc_out();
    void thread_yc_out_ap_vld();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
