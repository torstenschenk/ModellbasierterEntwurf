-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity split_ip is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC );
end;


architecture behav of split_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "split_ip,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.997000,HLS_SYN_LAT=2089107,HLS_SYN_TPT=2087184,HLS_SYN_MEM=9,HLS_SYN_DSP=21,HLS_SYN_FF=1260,HLS_SYN_LUT=1398}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal direction : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_AXIvideo2Mat103_U0_ap_start : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_ap_done : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_ap_continue : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_ap_idle : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_ap_ready : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_in_data_TREADY : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_AXIvideo2Mat103_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_AXIvideo2Mat103_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_AXIvideo2Mat103_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal split_ip_AXIvideo2Mat103_U0_direction_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_AXIvideo2Mat103_U0_direction_out_write : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_ap_start : STD_LOGIC := '0';
    signal split_ip_RGB2Gray_U0_ap_done : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_ap_continue : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_ap_idle : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_ap_ready : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_img_in_data_stream_0_V_read : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_img_in_data_stream_1_V_read : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_img_in_data_stream_2_V_read : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_img_out_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_RGB2Gray_U0_img_out_data_stream_0_V_write : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_img_out_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_RGB2Gray_U0_img_out_data_stream_1_V_write : STD_LOGIC;
    signal split_ip_RGB2Gray_U0_img_out_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_RGB2Gray_U0_img_out_data_stream_2_V_write : STD_LOGIC;
    signal split_ip_sobel_U0_ap_start : STD_LOGIC := '0';
    signal split_ip_sobel_U0_ap_done : STD_LOGIC;
    signal split_ip_sobel_U0_ap_continue : STD_LOGIC;
    signal split_ip_sobel_U0_ap_idle : STD_LOGIC;
    signal split_ip_sobel_U0_ap_ready : STD_LOGIC;
    signal split_ip_sobel_U0_img_in_data_stream_0_V_read : STD_LOGIC;
    signal split_ip_sobel_U0_img_in_data_stream_1_V_read : STD_LOGIC;
    signal split_ip_sobel_U0_img_in_data_stream_2_V_read : STD_LOGIC;
    signal split_ip_sobel_U0_img_out_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_sobel_U0_img_out_data_stream_0_V_write : STD_LOGIC;
    signal split_ip_sobel_U0_img_out_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_sobel_U0_img_out_data_stream_1_V_write : STD_LOGIC;
    signal split_ip_sobel_U0_img_out_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal split_ip_sobel_U0_img_out_data_stream_2_V_write : STD_LOGIC;
    signal split_ip_sobel_U0_direction_read : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_ap_start : STD_LOGIC := '0';
    signal split_ip_Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_out_data_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal split_ip_Mat2AXIvideo_U0_out_data_TVALID : STD_LOGIC;
    signal split_ip_Mat2AXIvideo_U0_out_data_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal split_ip_Mat2AXIvideo_U0_out_data_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal split_ip_Mat2AXIvideo_U0_out_data_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal split_ip_Mat2AXIvideo_U0_out_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal split_ip_Mat2AXIvideo_U0_out_data_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal split_ip_Mat2AXIvideo_U0_out_data_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_V_full_n : STD_LOGIC;
    signal img_0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_V_full_n : STD_LOGIC;
    signal img_0_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_empty_n : STD_LOGIC;
    signal direction_channel_full_n : STD_LOGIC;
    signal direction_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal direction_channel_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_V_full_n : STD_LOGIC;
    signal img_1_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_V_full_n : STD_LOGIC;
    signal img_1_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal img_2_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_1_V_full_n : STD_LOGIC;
    signal img_2_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_2_V_full_n : STD_LOGIC;
    signal img_2_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_2_V_empty_n : STD_LOGIC;

    component split_ip_AXIvideo2Mat103 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        in_data_TVALID : IN STD_LOGIC;
        in_data_TREADY : OUT STD_LOGIC;
        in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        direction : IN STD_LOGIC_VECTOR (7 downto 0);
        direction_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        direction_out_full_n : IN STD_LOGIC;
        direction_out_write : OUT STD_LOGIC );
    end component;


    component split_ip_RGB2Gray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_0_V_read : OUT STD_LOGIC;
        img_in_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_1_V_read : OUT STD_LOGIC;
        img_in_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_2_V_read : OUT STD_LOGIC;
        img_out_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_stream_0_V_full_n : IN STD_LOGIC;
        img_out_data_stream_0_V_write : OUT STD_LOGIC;
        img_out_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_stream_1_V_full_n : IN STD_LOGIC;
        img_out_data_stream_1_V_write : OUT STD_LOGIC;
        img_out_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_stream_2_V_full_n : IN STD_LOGIC;
        img_out_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component split_ip_sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_0_V_read : OUT STD_LOGIC;
        img_in_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_1_V_read : OUT STD_LOGIC;
        img_in_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_2_V_read : OUT STD_LOGIC;
        img_out_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_stream_0_V_full_n : IN STD_LOGIC;
        img_out_data_stream_0_V_write : OUT STD_LOGIC;
        img_out_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_stream_1_V_full_n : IN STD_LOGIC;
        img_out_data_stream_1_V_write : OUT STD_LOGIC;
        img_out_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_stream_2_V_full_n : IN STD_LOGIC;
        img_out_data_stream_2_V_write : OUT STD_LOGIC;
        direction_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        direction_empty_n : IN STD_LOGIC;
        direction_read : OUT STD_LOGIC );
    end component;


    component split_ip_Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_data_TVALID : OUT STD_LOGIC;
        out_data_TREADY : IN STD_LOGIC;
        out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_split_ip_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_0_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_direction_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_1_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_1_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_2_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_split_ip_img_2_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component split_ip_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        direction : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    split_ip_AXILiteS_s_axi_U : component split_ip_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        direction => direction);

    split_ip_AXIvideo2Mat103_U0 : component split_ip_AXIvideo2Mat103
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => split_ip_AXIvideo2Mat103_U0_ap_start,
        ap_done => split_ip_AXIvideo2Mat103_U0_ap_done,
        ap_continue => split_ip_AXIvideo2Mat103_U0_ap_continue,
        ap_idle => split_ip_AXIvideo2Mat103_U0_ap_idle,
        ap_ready => split_ip_AXIvideo2Mat103_U0_ap_ready,
        in_data_TDATA => in_data_TDATA,
        in_data_TVALID => in_data_TVALID,
        in_data_TREADY => split_ip_AXIvideo2Mat103_U0_in_data_TREADY,
        in_data_TKEEP => in_data_TKEEP,
        in_data_TSTRB => in_data_TSTRB,
        in_data_TUSER => in_data_TUSER,
        in_data_TLAST => in_data_TLAST,
        in_data_TID => in_data_TID,
        in_data_TDEST => in_data_TDEST,
        img_data_stream_0_V_din => split_ip_AXIvideo2Mat103_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_V_full_n,
        img_data_stream_0_V_write => split_ip_AXIvideo2Mat103_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => split_ip_AXIvideo2Mat103_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_V_full_n,
        img_data_stream_1_V_write => split_ip_AXIvideo2Mat103_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => split_ip_AXIvideo2Mat103_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_V_full_n,
        img_data_stream_2_V_write => split_ip_AXIvideo2Mat103_U0_img_data_stream_2_V_write,
        direction => direction,
        direction_out_din => split_ip_AXIvideo2Mat103_U0_direction_out_din,
        direction_out_full_n => direction_channel_full_n,
        direction_out_write => split_ip_AXIvideo2Mat103_U0_direction_out_write);

    split_ip_RGB2Gray_U0 : component split_ip_RGB2Gray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => split_ip_RGB2Gray_U0_ap_start,
        ap_done => split_ip_RGB2Gray_U0_ap_done,
        ap_continue => split_ip_RGB2Gray_U0_ap_continue,
        ap_idle => split_ip_RGB2Gray_U0_ap_idle,
        ap_ready => split_ip_RGB2Gray_U0_ap_ready,
        img_in_data_stream_0_V_dout => img_0_data_stream_0_V_dout,
        img_in_data_stream_0_V_empty_n => img_0_data_stream_0_V_empty_n,
        img_in_data_stream_0_V_read => split_ip_RGB2Gray_U0_img_in_data_stream_0_V_read,
        img_in_data_stream_1_V_dout => img_0_data_stream_1_V_dout,
        img_in_data_stream_1_V_empty_n => img_0_data_stream_1_V_empty_n,
        img_in_data_stream_1_V_read => split_ip_RGB2Gray_U0_img_in_data_stream_1_V_read,
        img_in_data_stream_2_V_dout => img_0_data_stream_2_V_dout,
        img_in_data_stream_2_V_empty_n => img_0_data_stream_2_V_empty_n,
        img_in_data_stream_2_V_read => split_ip_RGB2Gray_U0_img_in_data_stream_2_V_read,
        img_out_data_stream_0_V_din => split_ip_RGB2Gray_U0_img_out_data_stream_0_V_din,
        img_out_data_stream_0_V_full_n => img_1_data_stream_0_V_full_n,
        img_out_data_stream_0_V_write => split_ip_RGB2Gray_U0_img_out_data_stream_0_V_write,
        img_out_data_stream_1_V_din => split_ip_RGB2Gray_U0_img_out_data_stream_1_V_din,
        img_out_data_stream_1_V_full_n => img_1_data_stream_1_V_full_n,
        img_out_data_stream_1_V_write => split_ip_RGB2Gray_U0_img_out_data_stream_1_V_write,
        img_out_data_stream_2_V_din => split_ip_RGB2Gray_U0_img_out_data_stream_2_V_din,
        img_out_data_stream_2_V_full_n => img_1_data_stream_2_V_full_n,
        img_out_data_stream_2_V_write => split_ip_RGB2Gray_U0_img_out_data_stream_2_V_write);

    split_ip_sobel_U0 : component split_ip_sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => split_ip_sobel_U0_ap_start,
        ap_done => split_ip_sobel_U0_ap_done,
        ap_continue => split_ip_sobel_U0_ap_continue,
        ap_idle => split_ip_sobel_U0_ap_idle,
        ap_ready => split_ip_sobel_U0_ap_ready,
        img_in_data_stream_0_V_dout => img_1_data_stream_0_V_dout,
        img_in_data_stream_0_V_empty_n => img_1_data_stream_0_V_empty_n,
        img_in_data_stream_0_V_read => split_ip_sobel_U0_img_in_data_stream_0_V_read,
        img_in_data_stream_1_V_dout => img_1_data_stream_1_V_dout,
        img_in_data_stream_1_V_empty_n => img_1_data_stream_1_V_empty_n,
        img_in_data_stream_1_V_read => split_ip_sobel_U0_img_in_data_stream_1_V_read,
        img_in_data_stream_2_V_dout => img_1_data_stream_2_V_dout,
        img_in_data_stream_2_V_empty_n => img_1_data_stream_2_V_empty_n,
        img_in_data_stream_2_V_read => split_ip_sobel_U0_img_in_data_stream_2_V_read,
        img_out_data_stream_0_V_din => split_ip_sobel_U0_img_out_data_stream_0_V_din,
        img_out_data_stream_0_V_full_n => img_2_data_stream_0_V_full_n,
        img_out_data_stream_0_V_write => split_ip_sobel_U0_img_out_data_stream_0_V_write,
        img_out_data_stream_1_V_din => split_ip_sobel_U0_img_out_data_stream_1_V_din,
        img_out_data_stream_1_V_full_n => img_2_data_stream_1_V_full_n,
        img_out_data_stream_1_V_write => split_ip_sobel_U0_img_out_data_stream_1_V_write,
        img_out_data_stream_2_V_din => split_ip_sobel_U0_img_out_data_stream_2_V_din,
        img_out_data_stream_2_V_full_n => img_2_data_stream_2_V_full_n,
        img_out_data_stream_2_V_write => split_ip_sobel_U0_img_out_data_stream_2_V_write,
        direction_dout => direction_channel_dout,
        direction_empty_n => direction_channel_empty_n,
        direction_read => split_ip_sobel_U0_direction_read);

    split_ip_Mat2AXIvideo_U0 : component split_ip_Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => split_ip_Mat2AXIvideo_U0_ap_start,
        ap_done => split_ip_Mat2AXIvideo_U0_ap_done,
        ap_continue => split_ip_Mat2AXIvideo_U0_ap_continue,
        ap_idle => split_ip_Mat2AXIvideo_U0_ap_idle,
        ap_ready => split_ip_Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => img_2_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_2_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => split_ip_Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_2_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_2_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => split_ip_Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_2_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => img_2_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => split_ip_Mat2AXIvideo_U0_img_data_stream_2_V_read,
        out_data_TDATA => split_ip_Mat2AXIvideo_U0_out_data_TDATA,
        out_data_TVALID => split_ip_Mat2AXIvideo_U0_out_data_TVALID,
        out_data_TREADY => out_data_TREADY,
        out_data_TKEEP => split_ip_Mat2AXIvideo_U0_out_data_TKEEP,
        out_data_TSTRB => split_ip_Mat2AXIvideo_U0_out_data_TSTRB,
        out_data_TUSER => split_ip_Mat2AXIvideo_U0_out_data_TUSER,
        out_data_TLAST => split_ip_Mat2AXIvideo_U0_out_data_TLAST,
        out_data_TID => split_ip_Mat2AXIvideo_U0_out_data_TID,
        out_data_TDEST => split_ip_Mat2AXIvideo_U0_out_data_TDEST);

    img_0_data_stream_0_V_U : component FIFO_split_ip_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_AXIvideo2Mat103_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => split_ip_AXIvideo2Mat103_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => split_ip_RGB2Gray_U0_img_in_data_stream_0_V_read);

    img_0_data_stream_1_V_U : component FIFO_split_ip_img_0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_AXIvideo2Mat103_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_V_full_n,
        if_write => split_ip_AXIvideo2Mat103_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_V_dout,
        if_empty_n => img_0_data_stream_1_V_empty_n,
        if_read => split_ip_RGB2Gray_U0_img_in_data_stream_1_V_read);

    img_0_data_stream_2_V_U : component FIFO_split_ip_img_0_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_AXIvideo2Mat103_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_V_full_n,
        if_write => split_ip_AXIvideo2Mat103_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_V_dout,
        if_empty_n => img_0_data_stream_2_V_empty_n,
        if_read => split_ip_RGB2Gray_U0_img_in_data_stream_2_V_read);

    direction_channel_U : component FIFO_split_ip_direction_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_AXIvideo2Mat103_U0_direction_out_din,
        if_full_n => direction_channel_full_n,
        if_write => split_ip_AXIvideo2Mat103_U0_direction_out_write,
        if_dout => direction_channel_dout,
        if_empty_n => direction_channel_empty_n,
        if_read => split_ip_sobel_U0_direction_read);

    img_1_data_stream_0_V_U : component FIFO_split_ip_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_RGB2Gray_U0_img_out_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => split_ip_RGB2Gray_U0_img_out_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => split_ip_sobel_U0_img_in_data_stream_0_V_read);

    img_1_data_stream_1_V_U : component FIFO_split_ip_img_1_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_RGB2Gray_U0_img_out_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_V_full_n,
        if_write => split_ip_RGB2Gray_U0_img_out_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_V_dout,
        if_empty_n => img_1_data_stream_1_V_empty_n,
        if_read => split_ip_sobel_U0_img_in_data_stream_1_V_read);

    img_1_data_stream_2_V_U : component FIFO_split_ip_img_1_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_RGB2Gray_U0_img_out_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_V_full_n,
        if_write => split_ip_RGB2Gray_U0_img_out_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_V_dout,
        if_empty_n => img_1_data_stream_2_V_empty_n,
        if_read => split_ip_sobel_U0_img_in_data_stream_2_V_read);

    img_2_data_stream_0_V_U : component FIFO_split_ip_img_2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_sobel_U0_img_out_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_V_full_n,
        if_write => split_ip_sobel_U0_img_out_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_V_dout,
        if_empty_n => img_2_data_stream_0_V_empty_n,
        if_read => split_ip_Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_2_data_stream_1_V_U : component FIFO_split_ip_img_2_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_sobel_U0_img_out_data_stream_1_V_din,
        if_full_n => img_2_data_stream_1_V_full_n,
        if_write => split_ip_sobel_U0_img_out_data_stream_1_V_write,
        if_dout => img_2_data_stream_1_V_dout,
        if_empty_n => img_2_data_stream_1_V_empty_n,
        if_read => split_ip_Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_2_data_stream_2_V_U : component FIFO_split_ip_img_2_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_ip_sobel_U0_img_out_data_stream_2_V_din,
        if_full_n => img_2_data_stream_2_V_full_n,
        if_write => split_ip_sobel_U0_img_out_data_stream_2_V_write,
        if_dout => img_2_data_stream_2_V_dout,
        if_empty_n => img_2_data_stream_2_V_empty_n,
        if_read => split_ip_Mat2AXIvideo_U0_img_data_stream_2_V_read);





    split_ip_Mat2AXIvideo_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                split_ip_Mat2AXIvideo_U0_ap_start <= ap_const_logic_0;
            else
                split_ip_Mat2AXIvideo_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    split_ip_RGB2Gray_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                split_ip_RGB2Gray_U0_ap_start <= ap_const_logic_0;
            else
                split_ip_RGB2Gray_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    split_ip_sobel_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                split_ip_sobel_U0_ap_start <= ap_const_logic_0;
            else
                split_ip_sobel_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_0;
    in_data_TREADY <= split_ip_AXIvideo2Mat103_U0_in_data_TREADY;
    out_data_TDATA <= split_ip_Mat2AXIvideo_U0_out_data_TDATA;
    out_data_TDEST <= split_ip_Mat2AXIvideo_U0_out_data_TDEST;
    out_data_TID <= split_ip_Mat2AXIvideo_U0_out_data_TID;
    out_data_TKEEP <= split_ip_Mat2AXIvideo_U0_out_data_TKEEP;
    out_data_TLAST <= split_ip_Mat2AXIvideo_U0_out_data_TLAST;
    out_data_TSTRB <= split_ip_Mat2AXIvideo_U0_out_data_TSTRB;
    out_data_TUSER <= split_ip_Mat2AXIvideo_U0_out_data_TUSER;
    out_data_TVALID <= split_ip_Mat2AXIvideo_U0_out_data_TVALID;
    split_ip_AXIvideo2Mat103_U0_ap_continue <= ap_const_logic_1;
    split_ip_AXIvideo2Mat103_U0_ap_start <= ap_const_logic_1;
    split_ip_Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    split_ip_RGB2Gray_U0_ap_continue <= ap_const_logic_1;
    split_ip_sobel_U0_ap_continue <= ap_const_logic_1;
end behav;
