-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity moments is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of moments is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "moments,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.745000,HLS_SYN_LAT=6232689,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=588,HLS_SYN_LUT=775}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st9_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111111111111";
    constant ap_const_lv32_4007E800 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000001111110100000000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_1F5 : STD_LOGIC_VECTOR (10 downto 0) := "00111110101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_25 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal in_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal in_data_V_data_V_0_vld_in : STD_LOGIC;
    signal in_data_V_data_V_0_ack_out : STD_LOGIC;
    signal in_data_V_data_V_0_data_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal in_data_V_data_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_data_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_data_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal in_data_V_keep_V_0_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal in_data_V_keep_V_0_vld_in : STD_LOGIC;
    signal in_data_V_keep_V_0_ack_out : STD_LOGIC;
    signal in_data_V_keep_V_0_data_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal in_data_V_keep_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_keep_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_keep_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal in_data_V_strb_V_0_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal in_data_V_strb_V_0_vld_in : STD_LOGIC;
    signal in_data_V_strb_V_0_ack_out : STD_LOGIC;
    signal in_data_V_strb_V_0_data_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal in_data_V_strb_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_strb_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_strb_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal in_data_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_user_V_0_vld_in : STD_LOGIC;
    signal in_data_V_user_V_0_ack_out : STD_LOGIC;
    signal in_data_V_user_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_user_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_user_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_user_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal in_data_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_last_V_0_vld_in : STD_LOGIC;
    signal in_data_V_last_V_0_ack_out : STD_LOGIC;
    signal in_data_V_last_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_last_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_last_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_last_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal in_data_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_id_V_0_vld_in : STD_LOGIC;
    signal in_data_V_id_V_0_ack_out : STD_LOGIC;
    signal in_data_V_id_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_id_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_id_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_id_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal in_data_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_dest_V_0_vld_in : STD_LOGIC;
    signal in_data_V_dest_V_0_ack_out : STD_LOGIC;
    signal in_data_V_dest_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_V_dest_V_0_areset_d : STD_LOGIC;
    signal in_data_V_dest_V_0_in_rdy : STD_LOGIC := '0';
    signal in_data_V_dest_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal in_data_V_dest_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal out_data_V_data_V_1_vld_in : STD_LOGIC;
    signal out_data_V_data_V_1_ack_out : STD_LOGIC;
    signal out_data_V_data_V_1_data_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal out_data_V_data_V_1_sRdy : STD_LOGIC;
    signal out_data_V_data_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_data_V_1_areset_d : STD_LOGIC;
    signal out_data_V_keep_V_1_vld_in : STD_LOGIC;
    signal out_data_V_keep_V_1_ack_out : STD_LOGIC;
    signal out_data_V_keep_V_1_data_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal out_data_V_keep_V_1_sRdy : STD_LOGIC;
    signal out_data_V_keep_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_keep_V_1_areset_d : STD_LOGIC;
    signal out_data_V_strb_V_1_vld_in : STD_LOGIC;
    signal out_data_V_strb_V_1_ack_out : STD_LOGIC;
    signal out_data_V_strb_V_1_data_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal out_data_V_strb_V_1_sRdy : STD_LOGIC;
    signal out_data_V_strb_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_strb_V_1_areset_d : STD_LOGIC;
    signal out_data_V_user_V_1_vld_in : STD_LOGIC;
    signal out_data_V_user_V_1_ack_out : STD_LOGIC;
    signal out_data_V_user_V_1_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_V_user_V_1_sRdy : STD_LOGIC;
    signal out_data_V_user_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_user_V_1_areset_d : STD_LOGIC;
    signal out_data_V_last_V_1_vld_in : STD_LOGIC;
    signal out_data_V_last_V_1_ack_out : STD_LOGIC;
    signal out_data_V_last_V_1_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_V_last_V_1_sRdy : STD_LOGIC;
    signal out_data_V_last_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_last_V_1_areset_d : STD_LOGIC;
    signal out_data_V_id_V_1_vld_in : STD_LOGIC;
    signal out_data_V_id_V_1_ack_out : STD_LOGIC;
    signal out_data_V_id_V_1_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_V_id_V_1_sRdy : STD_LOGIC;
    signal out_data_V_id_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_id_V_1_areset_d : STD_LOGIC;
    signal out_data_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_data_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_data_V_dest_V_1_data_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_V_dest_V_1_sRdy : STD_LOGIC;
    signal out_data_V_dest_V_1_mVld : STD_LOGIC := '0';
    signal out_data_V_dest_V_1_areset_d : STD_LOGIC;
    signal x_ap_vld : STD_LOGIC;
    signal y_ap_vld : STD_LOGIC;
    signal angle_ap_vld : STD_LOGIC;
    signal col_i_reg_222 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_i_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_458 : BOOLEAN;
    signal row_fu_281_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_reg_359 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_469 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_V_read : STD_LOGIC;
    signal img_0_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_V_read : STD_LOGIC;
    signal ap_sig_495 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_1_data_stream_1_V_full_n : STD_LOGIC;
    signal img_1_data_stream_1_V_write : STD_LOGIC;
    signal img_1_data_stream_2_V_full_n : STD_LOGIC;
    signal img_1_data_stream_2_V_write : STD_LOGIC;
    signal ap_sig_521 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal col_fu_293_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_12_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_12_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_305_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_312_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_389 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_moments_AXIvideo2Mat_fu_233_ap_start : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_ap_done : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_ap_idle : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_ap_ready : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_in_data_TVALID : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_write : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_write : STD_LOGIC;
    signal grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_write : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_ap_start : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_ap_done : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_ap_idle : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_ap_ready : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_img_data_stream_0_V_read : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_img_data_stream_1_V_read : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_img_data_stream_2_V_read : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID : STD_LOGIC;
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_moments_Mat2AXIvideo_fu_254_out_data_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal row_i_reg_211 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_605 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_5 : STD_LOGIC;
    signal ap_sig_615 : BOOLEAN;
    signal ap_reg_grp_moments_AXIvideo2Mat_fu_233_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_626 : BOOLEAN;
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_1_V_full_n : STD_LOGIC;
    signal img_0_data_stream_1_V_write : STD_LOGIC;
    signal img_0_data_stream_2_V_full_n : STD_LOGIC;
    signal img_0_data_stream_2_V_write : STD_LOGIC;
    signal ap_reg_grp_moments_Mat2AXIvideo_fu_254_ap_start : STD_LOGIC := '0';
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal ap_sig_cseq_ST_st9_fsm_6 : STD_LOGIC;
    signal ap_sig_653 : BOOLEAN;
    signal img_1_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_V_read : STD_LOGIC;
    signal img_1_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_V_read : STD_LOGIC;
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_692 : BOOLEAN;
    signal ap_sig_707 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component moments_AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        in_data_TVALID : IN STD_LOGIC;
        in_data_TREADY : OUT STD_LOGIC;
        in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component moments_Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_data_TVALID : OUT STD_LOGIC;
        out_data_TREADY : IN STD_LOGIC;
        out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_moments_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_moments_img_0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_moments_img_0_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_moments_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_moments_img_1_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_moments_img_1_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component moments_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        x_ap_vld : IN STD_LOGIC;
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        y_ap_vld : IN STD_LOGIC;
        angle : IN STD_LOGIC_VECTOR (31 downto 0);
        angle_ap_vld : IN STD_LOGIC );
    end component;



begin
    moments_control_s_axi_U : component moments_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        x => ap_const_lv32_0,
        x_ap_vld => x_ap_vld,
        y => ap_const_lv32_FFF,
        y_ap_vld => y_ap_vld,
        angle => ap_const_lv32_4007E800,
        angle_ap_vld => angle_ap_vld);

    grp_moments_AXIvideo2Mat_fu_233 : component moments_AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_moments_AXIvideo2Mat_fu_233_ap_start,
        ap_done => grp_moments_AXIvideo2Mat_fu_233_ap_done,
        ap_idle => grp_moments_AXIvideo2Mat_fu_233_ap_idle,
        ap_ready => grp_moments_AXIvideo2Mat_fu_233_ap_ready,
        in_data_TDATA => in_data_V_data_V_0_data_out,
        in_data_TVALID => grp_moments_AXIvideo2Mat_fu_233_in_data_TVALID,
        in_data_TREADY => grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY,
        in_data_TKEEP => in_data_V_keep_V_0_data_out,
        in_data_TSTRB => in_data_V_strb_V_0_data_out,
        in_data_TUSER => in_data_V_user_V_0_data_out,
        in_data_TLAST => in_data_V_last_V_0_data_out,
        in_data_TID => in_data_V_id_V_0_data_out,
        in_data_TDEST => in_data_V_dest_V_0_data_out,
        img_data_stream_0_V_din => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_V_full_n,
        img_data_stream_0_V_write => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_write,
        img_data_stream_1_V_din => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_V_full_n,
        img_data_stream_1_V_write => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_write,
        img_data_stream_2_V_din => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_V_full_n,
        img_data_stream_2_V_write => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_write);

    grp_moments_Mat2AXIvideo_fu_254 : component moments_Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_moments_Mat2AXIvideo_fu_254_ap_start,
        ap_done => grp_moments_Mat2AXIvideo_fu_254_ap_done,
        ap_idle => grp_moments_Mat2AXIvideo_fu_254_ap_idle,
        ap_ready => grp_moments_Mat2AXIvideo_fu_254_ap_ready,
        img_data_stream_0_V_dout => img_1_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_1_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => grp_moments_Mat2AXIvideo_fu_254_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_1_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_1_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => grp_moments_Mat2AXIvideo_fu_254_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_1_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => img_1_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => grp_moments_Mat2AXIvideo_fu_254_img_data_stream_2_V_read,
        out_data_TDATA => grp_moments_Mat2AXIvideo_fu_254_out_data_TDATA,
        out_data_TVALID => grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID,
        out_data_TREADY => out_data_V_dest_V_1_sRdy,
        out_data_TKEEP => grp_moments_Mat2AXIvideo_fu_254_out_data_TKEEP,
        out_data_TSTRB => grp_moments_Mat2AXIvideo_fu_254_out_data_TSTRB,
        out_data_TUSER => grp_moments_Mat2AXIvideo_fu_254_out_data_TUSER,
        out_data_TLAST => grp_moments_Mat2AXIvideo_fu_254_out_data_TLAST,
        out_data_TID => grp_moments_Mat2AXIvideo_fu_254_out_data_TID,
        out_data_TDEST => grp_moments_Mat2AXIvideo_fu_254_out_data_TDEST);

    img_0_data_stream_0_V_img_0_data_stream_0_V_fifo_U : component FIFO_moments_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_0_data_stream_1_V_img_0_data_stream_1_V_fifo_U : component FIFO_moments_img_0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_V_full_n,
        if_write => img_0_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_V_dout,
        if_empty_n => img_0_data_stream_1_V_empty_n,
        if_read => img_0_data_stream_1_V_read);

    img_0_data_stream_2_V_img_0_data_stream_2_V_fifo_U : component FIFO_moments_img_0_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_V_full_n,
        if_write => img_0_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_V_dout,
        if_empty_n => img_0_data_stream_2_V_empty_n,
        if_read => img_0_data_stream_2_V_read);

    img_1_data_stream_0_V_img_1_data_stream_0_V_fifo_U : component FIFO_moments_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_1_reg_384,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);

    img_1_data_stream_1_V_img_1_data_stream_1_V_fifo_U : component FIFO_moments_img_1_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_2_reg_389,
        if_full_n => img_1_data_stream_1_V_full_n,
        if_write => img_1_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_V_dout,
        if_empty_n => img_1_data_stream_1_V_empty_n,
        if_read => img_1_data_stream_1_V_read);

    img_1_data_stream_2_V_img_1_data_stream_2_V_fifo_U : component FIFO_moments_img_1_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_reg_379,
        if_full_n => img_1_data_stream_2_V_full_n,
        if_write => img_1_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_V_dout,
        if_empty_n => img_1_data_stream_2_V_empty_n,
        if_read => img_1_data_stream_2_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_moments_AXIvideo2Mat_fu_233_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_moments_AXIvideo2Mat_fu_233_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_grp_moments_AXIvideo2Mat_fu_233_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_moments_AXIvideo2Mat_fu_233_ap_ready)) then 
                    ap_reg_grp_moments_AXIvideo2Mat_fu_233_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_moments_Mat2AXIvideo_fu_254_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_moments_Mat2AXIvideo_fu_254_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond5_i_fu_275_p2 = ap_const_lv1_0)))) then 
                    ap_reg_grp_moments_Mat2AXIvideo_fu_254_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_moments_Mat2AXIvideo_fu_254_ap_ready)) then 
                    ap_reg_grp_moments_Mat2AXIvideo_fu_254_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_i_fu_287_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond5_i_fu_275_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_i_fu_287_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond5_i_fu_275_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_i_fu_287_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond5_i_fu_275_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_data_V_data_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_data_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_data_V_0_has_vld_data_reg <= in_data_V_data_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_data_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_data_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_data_V_0_in_rdy <= (in_data_V_data_V_0_ack_out or not(in_data_V_data_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    in_data_V_dest_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_dest_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_dest_V_0_has_vld_data_reg <= in_data_V_dest_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_dest_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_dest_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_dest_V_0_in_rdy <= (in_data_V_dest_V_0_ack_out or not(in_data_V_dest_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    in_data_V_id_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_id_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_id_V_0_has_vld_data_reg <= in_data_V_id_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_id_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_id_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_id_V_0_in_rdy <= (in_data_V_id_V_0_ack_out or not(in_data_V_id_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    in_data_V_keep_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_keep_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_keep_V_0_has_vld_data_reg <= in_data_V_keep_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_keep_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_keep_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_keep_V_0_in_rdy <= (in_data_V_keep_V_0_ack_out or not(in_data_V_keep_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    in_data_V_last_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_last_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_last_V_0_has_vld_data_reg <= in_data_V_last_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_last_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_last_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_last_V_0_in_rdy <= (in_data_V_last_V_0_ack_out or not(in_data_V_last_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    in_data_V_strb_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_strb_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_strb_V_0_has_vld_data_reg <= in_data_V_strb_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_strb_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_strb_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_strb_V_0_in_rdy <= (in_data_V_strb_V_0_ack_out or not(in_data_V_strb_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    in_data_V_user_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_user_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                in_data_V_user_V_0_has_vld_data_reg <= in_data_V_user_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    in_data_V_user_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_user_V_0_in_rdy <= ap_const_logic_0;
            else
                in_data_V_user_V_0_in_rdy <= (in_data_V_user_V_0_ack_out or not(in_data_V_user_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    out_data_V_data_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_data_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_data_V_1_vld_in)) then 
                    out_data_V_data_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_data_V_1_ack_out)) then 
                    out_data_V_data_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_dest_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_dest_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_dest_V_1_vld_in)) then 
                    out_data_V_dest_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_dest_V_1_ack_out)) then 
                    out_data_V_dest_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_id_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_id_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_id_V_1_vld_in)) then 
                    out_data_V_id_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_id_V_1_ack_out)) then 
                    out_data_V_id_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_keep_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_keep_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_keep_V_1_vld_in)) then 
                    out_data_V_keep_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_keep_V_1_ack_out)) then 
                    out_data_V_keep_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_last_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_last_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_last_V_1_vld_in)) then 
                    out_data_V_last_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_last_V_1_ack_out)) then 
                    out_data_V_last_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_strb_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_strb_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_strb_V_1_vld_in)) then 
                    out_data_V_strb_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_strb_V_1_ack_out)) then 
                    out_data_V_strb_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_user_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_user_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = out_data_V_user_V_1_vld_in)) then 
                    out_data_V_user_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = out_data_V_user_V_1_ack_out)) then 
                    out_data_V_user_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_i_fu_287_p2 = ap_const_lv1_0))) then 
                col_i_reg_222 <= col_fu_293_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond5_i_fu_275_p2 = ap_const_lv1_0))) then 
                col_i_reg_222 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    row_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                row_i_reg_211 <= row_reg_359;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_moments_AXIvideo2Mat_fu_233_ap_done)))) then 
                row_i_reg_211 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1 <= exitcond_i_reg_364;
                exitcond_i_reg_364 <= exitcond_i_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_data_V_0_vld_in) and (ap_const_logic_1 = in_data_V_data_V_0_in_rdy))) then
                in_data_V_data_V_0_data_reg <= in_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_const_logic_1)) then
                in_data_V_dest_V_0_areset_d <= ap_rst_n_inv;
                out_data_V_data_V_1_areset_d <= ap_rst_n_inv;
                out_data_V_dest_V_1_areset_d <= ap_rst_n_inv;
                out_data_V_id_V_1_areset_d <= ap_rst_n_inv;
                out_data_V_keep_V_1_areset_d <= ap_rst_n_inv;
                out_data_V_last_V_1_areset_d <= ap_rst_n_inv;
                out_data_V_strb_V_1_areset_d <= ap_rst_n_inv;
                out_data_V_user_V_1_areset_d <= ap_rst_n_inv;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_dest_V_0_vld_in) and (ap_const_logic_1 = in_data_V_dest_V_0_in_rdy))) then
                in_data_V_dest_V_0_data_reg <= in_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_id_V_0_vld_in) and (ap_const_logic_1 = in_data_V_id_V_0_in_rdy))) then
                in_data_V_id_V_0_data_reg <= in_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_keep_V_0_vld_in) and (ap_const_logic_1 = in_data_V_keep_V_0_in_rdy))) then
                in_data_V_keep_V_0_data_reg <= in_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_last_V_0_vld_in) and (ap_const_logic_1 = in_data_V_last_V_0_in_rdy))) then
                in_data_V_last_V_0_data_reg <= in_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_strb_V_0_vld_in) and (ap_const_logic_1 = in_data_V_strb_V_0_in_rdy))) then
                in_data_V_strb_V_0_data_reg <= in_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = in_data_V_user_V_0_vld_in) and (ap_const_logic_1 = in_data_V_user_V_0_in_rdy))) then
                in_data_V_user_V_0_data_reg <= in_data_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_data_V_1_vld_in) and (ap_const_logic_1 = out_data_V_data_V_1_sRdy))) then
                out_data_V_data_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_dest_V_1_vld_in) and (ap_const_logic_1 = out_data_V_dest_V_1_sRdy))) then
                out_data_V_dest_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_id_V_1_vld_in) and (ap_const_logic_1 = out_data_V_id_V_1_sRdy))) then
                out_data_V_id_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_keep_V_1_vld_in) and (ap_const_logic_1 = out_data_V_keep_V_1_sRdy))) then
                out_data_V_keep_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_last_V_1_vld_in) and (ap_const_logic_1 = out_data_V_last_V_1_sRdy))) then
                out_data_V_last_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_strb_V_1_vld_in) and (ap_const_logic_1 = out_data_V_strb_V_1_sRdy))) then
                out_data_V_strb_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = out_data_V_user_V_1_vld_in) and (ap_const_logic_1 = out_data_V_user_V_1_sRdy))) then
                out_data_V_user_V_1_data_reg <= grp_moments_Mat2AXIvideo_fu_254_out_data_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                row_reg_359 <= row_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (exitcond_i_reg_364 = ap_const_lv1_0) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                tmp_1_reg_384 <= tmp_1_fu_305_p3;
                tmp_2_reg_389 <= tmp_2_fu_312_p3;
                tmp_reg_379 <= img_0_data_stream_2_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_i_fu_287_p2 = ap_const_lv1_0))) then
                tmp_i_12_reg_373 <= tmp_i_12_fu_299_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_i_fu_275_p2, exitcond_i_fu_287_p2, ap_reg_ppiten_pp0_it0, ap_sig_495, ap_reg_ppiten_pp0_it1, ap_sig_521, ap_reg_ppiten_pp0_it2, grp_moments_AXIvideo2Mat_fu_233_ap_done, grp_moments_Mat2AXIvideo_fu_254_ap_done, ap_sig_707)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_moments_AXIvideo2Mat_fu_233_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond5_i_fu_275_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_6;
                end if;
            when ap_ST_pp0_stg0_fsm_4 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_i_fu_287_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_i_fu_287_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                end if;
            when ap_ST_st8_fsm_5 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st9_fsm_6 => 
                if (not((ap_const_logic_0 = grp_moments_Mat2AXIvideo_fu_254_ap_done))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_6;
                end if;
            when ap_ST_st10_fsm_7 => 
                if (not(ap_sig_707)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    angle_ap_vld_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7, ap_sig_707)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not(ap_sig_707))) then 
            angle_ap_vld <= ap_const_logic_1;
        else 
            angle_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7, ap_sig_707)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not(ap_sig_707))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7, ap_sig_707)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not(ap_sig_707))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_458_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_458 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_469_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_469 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_495_assign_proc : process(exitcond_i_reg_364, img_0_data_stream_0_V_empty_n, img_0_data_stream_1_V_empty_n, img_0_data_stream_2_V_empty_n)
    begin
                ap_sig_495 <= (((img_0_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_i_reg_364 = ap_const_lv1_0)) or ((exitcond_i_reg_364 = ap_const_lv1_0) and (img_0_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_364 = ap_const_lv1_0) and (img_0_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    ap_sig_521_assign_proc : process(img_1_data_stream_0_V_full_n, ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1, img_1_data_stream_1_V_full_n, img_1_data_stream_2_V_full_n)
    begin
                ap_sig_521 <= (((img_1_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1) and (img_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1) and (img_1_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    ap_sig_605_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_605 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_615_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_615 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_626_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_626 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_653_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_653 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_692_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_692 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_707_assign_proc : process(out_data_V_data_V_1_sRdy, out_data_V_keep_V_1_sRdy, out_data_V_strb_V_1_sRdy, out_data_V_user_V_1_sRdy, out_data_V_last_V_1_sRdy, out_data_V_id_V_1_sRdy, out_data_V_dest_V_1_sRdy)
    begin
                ap_sig_707 <= ((out_data_V_data_V_1_sRdy = ap_const_logic_0) or (out_data_V_keep_V_1_sRdy = ap_const_logic_0) or (out_data_V_strb_V_1_sRdy = ap_const_logic_0) or (out_data_V_user_V_1_sRdy = ap_const_logic_0) or (out_data_V_last_V_1_sRdy = ap_const_logic_0) or (out_data_V_id_V_1_sRdy = ap_const_logic_0) or (out_data_V_dest_V_1_sRdy = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_469)
    begin
        if (ap_sig_469) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_692)
    begin
        if (ap_sig_692) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_25)
    begin
        if (ap_sig_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_626)
    begin
        if (ap_sig_626) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_605)
    begin
        if (ap_sig_605) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_458)
    begin
        if (ap_sig_458) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_5_assign_proc : process(ap_sig_615)
    begin
        if (ap_sig_615) then 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_6_assign_proc : process(ap_sig_653)
    begin
        if (ap_sig_653) then 
            ap_sig_cseq_ST_st9_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_293_p2 <= std_logic_vector(unsigned(col_i_reg_222) + unsigned(ap_const_lv11_1));
    exitcond5_i_fu_275_p2 <= "1" when (row_i_reg_211 = ap_const_lv11_438) else "0";
    exitcond_i_fu_287_p2 <= "1" when (col_i_reg_222 = ap_const_lv11_780) else "0";
    grp_moments_AXIvideo2Mat_fu_233_ap_start <= ap_reg_grp_moments_AXIvideo2Mat_fu_233_ap_start;
    grp_moments_AXIvideo2Mat_fu_233_in_data_TVALID <= ((in_data_TVALID or in_data_V_dest_V_0_has_vld_data_reg) and not(in_data_V_dest_V_0_areset_d));
    grp_moments_Mat2AXIvideo_fu_254_ap_start <= ap_reg_grp_moments_Mat2AXIvideo_fu_254_ap_start;

    img_0_data_stream_0_V_read_assign_proc : process(exitcond_i_reg_364, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_495, ap_reg_ppiten_pp0_it1, ap_sig_521, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (exitcond_i_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_0_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_0_V_write_assign_proc : process(grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_write, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            img_0_data_stream_0_V_write <= grp_moments_AXIvideo2Mat_fu_233_img_data_stream_0_V_write;
        else 
            img_0_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_1_V_read_assign_proc : process(exitcond_i_reg_364, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_495, ap_reg_ppiten_pp0_it1, ap_sig_521, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (exitcond_i_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_0_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_1_V_write_assign_proc : process(grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_write, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            img_0_data_stream_1_V_write <= grp_moments_AXIvideo2Mat_fu_233_img_data_stream_1_V_write;
        else 
            img_0_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_2_V_read_assign_proc : process(exitcond_i_reg_364, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_495, ap_reg_ppiten_pp0_it1, ap_sig_521, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (exitcond_i_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_0_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_2_V_write_assign_proc : process(grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_write, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            img_0_data_stream_2_V_write <= grp_moments_AXIvideo2Mat_fu_233_img_data_stream_2_V_write;
        else 
            img_0_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_0_V_read_assign_proc : process(grp_moments_Mat2AXIvideo_fu_254_img_data_stream_0_V_read, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6)) then 
            img_1_data_stream_0_V_read <= grp_moments_Mat2AXIvideo_fu_254_img_data_stream_0_V_read;
        else 
            img_1_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_0_V_write_assign_proc : process(ap_sig_495, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1, ap_sig_521, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_1_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_1_V_read_assign_proc : process(grp_moments_Mat2AXIvideo_fu_254_img_data_stream_1_V_read, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6)) then 
            img_1_data_stream_1_V_read <= grp_moments_Mat2AXIvideo_fu_254_img_data_stream_1_V_read;
        else 
            img_1_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_1_V_write_assign_proc : process(ap_sig_495, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1, ap_sig_521, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_1_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_2_V_read_assign_proc : process(grp_moments_Mat2AXIvideo_fu_254_img_data_stream_2_V_read, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6)) then 
            img_1_data_stream_2_V_read <= grp_moments_Mat2AXIvideo_fu_254_img_data_stream_2_V_read;
        else 
            img_1_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_2_V_write_assign_proc : process(ap_sig_495, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1, ap_sig_521, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_364_pp0_iter1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_495 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_521 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_1_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    in_data_TREADY <= in_data_V_dest_V_0_in_rdy;
    in_data_V_data_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_data_V_0_data_out_assign_proc : process(in_data_TDATA, in_data_V_data_V_0_data_reg, in_data_V_data_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_data_V_0_has_vld_data_reg)) then 
            in_data_V_data_V_0_data_out <= in_data_V_data_V_0_data_reg;
        else 
            in_data_V_data_V_0_data_out <= in_data_TDATA;
        end if; 
    end process;


    in_data_V_data_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_data_V_0_vld_in, in_data_V_data_V_0_ack_out, in_data_V_data_V_0_in_rdy, in_data_V_data_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_data_V_0_vld_in) and (ap_const_logic_0 = in_data_V_data_V_0_ack_out) and (ap_const_logic_1 = in_data_V_data_V_0_in_rdy))) then 
            in_data_V_data_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_data_V_0_ack_out) and (ap_const_logic_1 = in_data_V_data_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_data_V_0_vld_in) or (ap_const_logic_0 = in_data_V_data_V_0_in_rdy)))) then 
            in_data_V_data_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_data_V_0_has_vld_data_reg_i <= in_data_V_data_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_data_V_0_vld_in <= in_data_TVALID;
    in_data_V_dest_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_dest_V_0_data_out_assign_proc : process(in_data_TDEST, in_data_V_dest_V_0_data_reg, in_data_V_dest_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_dest_V_0_has_vld_data_reg)) then 
            in_data_V_dest_V_0_data_out <= in_data_V_dest_V_0_data_reg;
        else 
            in_data_V_dest_V_0_data_out <= in_data_TDEST;
        end if; 
    end process;


    in_data_V_dest_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_dest_V_0_vld_in, in_data_V_dest_V_0_ack_out, in_data_V_dest_V_0_in_rdy, in_data_V_dest_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_dest_V_0_vld_in) and (ap_const_logic_0 = in_data_V_dest_V_0_ack_out) and (ap_const_logic_1 = in_data_V_dest_V_0_in_rdy))) then 
            in_data_V_dest_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_dest_V_0_ack_out) and (ap_const_logic_1 = in_data_V_dest_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_dest_V_0_vld_in) or (ap_const_logic_0 = in_data_V_dest_V_0_in_rdy)))) then 
            in_data_V_dest_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_dest_V_0_has_vld_data_reg_i <= in_data_V_dest_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_dest_V_0_vld_in <= in_data_TVALID;
    in_data_V_id_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_id_V_0_data_out_assign_proc : process(in_data_TID, in_data_V_id_V_0_data_reg, in_data_V_id_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_id_V_0_has_vld_data_reg)) then 
            in_data_V_id_V_0_data_out <= in_data_V_id_V_0_data_reg;
        else 
            in_data_V_id_V_0_data_out <= in_data_TID;
        end if; 
    end process;


    in_data_V_id_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_id_V_0_vld_in, in_data_V_id_V_0_ack_out, in_data_V_id_V_0_in_rdy, in_data_V_id_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_id_V_0_vld_in) and (ap_const_logic_0 = in_data_V_id_V_0_ack_out) and (ap_const_logic_1 = in_data_V_id_V_0_in_rdy))) then 
            in_data_V_id_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_id_V_0_ack_out) and (ap_const_logic_1 = in_data_V_id_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_id_V_0_vld_in) or (ap_const_logic_0 = in_data_V_id_V_0_in_rdy)))) then 
            in_data_V_id_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_id_V_0_has_vld_data_reg_i <= in_data_V_id_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_id_V_0_vld_in <= in_data_TVALID;
    in_data_V_keep_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_keep_V_0_data_out_assign_proc : process(in_data_TKEEP, in_data_V_keep_V_0_data_reg, in_data_V_keep_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_keep_V_0_has_vld_data_reg)) then 
            in_data_V_keep_V_0_data_out <= in_data_V_keep_V_0_data_reg;
        else 
            in_data_V_keep_V_0_data_out <= in_data_TKEEP;
        end if; 
    end process;


    in_data_V_keep_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_keep_V_0_vld_in, in_data_V_keep_V_0_ack_out, in_data_V_keep_V_0_in_rdy, in_data_V_keep_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_keep_V_0_vld_in) and (ap_const_logic_0 = in_data_V_keep_V_0_ack_out) and (ap_const_logic_1 = in_data_V_keep_V_0_in_rdy))) then 
            in_data_V_keep_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_keep_V_0_ack_out) and (ap_const_logic_1 = in_data_V_keep_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_keep_V_0_vld_in) or (ap_const_logic_0 = in_data_V_keep_V_0_in_rdy)))) then 
            in_data_V_keep_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_keep_V_0_has_vld_data_reg_i <= in_data_V_keep_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_keep_V_0_vld_in <= in_data_TVALID;
    in_data_V_last_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_last_V_0_data_out_assign_proc : process(in_data_TLAST, in_data_V_last_V_0_data_reg, in_data_V_last_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_last_V_0_has_vld_data_reg)) then 
            in_data_V_last_V_0_data_out <= in_data_V_last_V_0_data_reg;
        else 
            in_data_V_last_V_0_data_out <= in_data_TLAST;
        end if; 
    end process;


    in_data_V_last_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_last_V_0_vld_in, in_data_V_last_V_0_ack_out, in_data_V_last_V_0_in_rdy, in_data_V_last_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_last_V_0_vld_in) and (ap_const_logic_0 = in_data_V_last_V_0_ack_out) and (ap_const_logic_1 = in_data_V_last_V_0_in_rdy))) then 
            in_data_V_last_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_last_V_0_ack_out) and (ap_const_logic_1 = in_data_V_last_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_last_V_0_vld_in) or (ap_const_logic_0 = in_data_V_last_V_0_in_rdy)))) then 
            in_data_V_last_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_last_V_0_has_vld_data_reg_i <= in_data_V_last_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_last_V_0_vld_in <= in_data_TVALID;
    in_data_V_strb_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_strb_V_0_data_out_assign_proc : process(in_data_TSTRB, in_data_V_strb_V_0_data_reg, in_data_V_strb_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_strb_V_0_has_vld_data_reg)) then 
            in_data_V_strb_V_0_data_out <= in_data_V_strb_V_0_data_reg;
        else 
            in_data_V_strb_V_0_data_out <= in_data_TSTRB;
        end if; 
    end process;


    in_data_V_strb_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_strb_V_0_vld_in, in_data_V_strb_V_0_ack_out, in_data_V_strb_V_0_in_rdy, in_data_V_strb_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_strb_V_0_vld_in) and (ap_const_logic_0 = in_data_V_strb_V_0_ack_out) and (ap_const_logic_1 = in_data_V_strb_V_0_in_rdy))) then 
            in_data_V_strb_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_strb_V_0_ack_out) and (ap_const_logic_1 = in_data_V_strb_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_strb_V_0_vld_in) or (ap_const_logic_0 = in_data_V_strb_V_0_in_rdy)))) then 
            in_data_V_strb_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_strb_V_0_has_vld_data_reg_i <= in_data_V_strb_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_strb_V_0_vld_in <= in_data_TVALID;
    in_data_V_user_V_0_ack_out <= grp_moments_AXIvideo2Mat_fu_233_in_data_TREADY;

    in_data_V_user_V_0_data_out_assign_proc : process(in_data_TUSER, in_data_V_user_V_0_data_reg, in_data_V_user_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = in_data_V_user_V_0_has_vld_data_reg)) then 
            in_data_V_user_V_0_data_out <= in_data_V_user_V_0_data_reg;
        else 
            in_data_V_user_V_0_data_out <= in_data_TUSER;
        end if; 
    end process;


    in_data_V_user_V_0_has_vld_data_reg_i_assign_proc : process(in_data_V_user_V_0_vld_in, in_data_V_user_V_0_ack_out, in_data_V_user_V_0_in_rdy, in_data_V_user_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = in_data_V_user_V_0_vld_in) and (ap_const_logic_0 = in_data_V_user_V_0_ack_out) and (ap_const_logic_1 = in_data_V_user_V_0_in_rdy))) then 
            in_data_V_user_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = in_data_V_user_V_0_ack_out) and (ap_const_logic_1 = in_data_V_user_V_0_has_vld_data_reg) and ((ap_const_logic_0 = in_data_V_user_V_0_vld_in) or (ap_const_logic_0 = in_data_V_user_V_0_in_rdy)))) then 
            in_data_V_user_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            in_data_V_user_V_0_has_vld_data_reg_i <= in_data_V_user_V_0_has_vld_data_reg;
        end if; 
    end process;

    in_data_V_user_V_0_vld_in <= in_data_TVALID;
    out_data_TDATA <= out_data_V_data_V_1_data_reg;
    out_data_TDEST <= out_data_V_dest_V_1_data_reg;
    out_data_TID <= out_data_V_id_V_1_data_reg;
    out_data_TKEEP <= out_data_V_keep_V_1_data_reg;
    out_data_TLAST <= out_data_V_last_V_1_data_reg;
    out_data_TSTRB <= out_data_V_strb_V_1_data_reg;
    out_data_TUSER <= out_data_V_user_V_1_data_reg;
    out_data_TVALID <= out_data_V_dest_V_1_mVld;
    out_data_V_data_V_1_ack_out <= out_data_TREADY;

    out_data_V_data_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_data_V_1_mVld, out_data_V_data_V_1_areset_d)
    begin
        out_data_V_data_V_1_sRdy <= (not(out_data_V_data_V_1_areset_d) and (out_data_TREADY or not(out_data_V_data_V_1_mVld)));
    end process;

    out_data_V_data_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    out_data_V_dest_V_1_ack_out <= out_data_TREADY;

    out_data_V_dest_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_dest_V_1_mVld, out_data_V_dest_V_1_areset_d)
    begin
        out_data_V_dest_V_1_sRdy <= (not(out_data_V_dest_V_1_areset_d) and (out_data_TREADY or not(out_data_V_dest_V_1_mVld)));
    end process;

    out_data_V_dest_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    out_data_V_id_V_1_ack_out <= out_data_TREADY;

    out_data_V_id_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_id_V_1_mVld, out_data_V_id_V_1_areset_d)
    begin
        out_data_V_id_V_1_sRdy <= (not(out_data_V_id_V_1_areset_d) and (out_data_TREADY or not(out_data_V_id_V_1_mVld)));
    end process;

    out_data_V_id_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    out_data_V_keep_V_1_ack_out <= out_data_TREADY;

    out_data_V_keep_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_keep_V_1_mVld, out_data_V_keep_V_1_areset_d)
    begin
        out_data_V_keep_V_1_sRdy <= (not(out_data_V_keep_V_1_areset_d) and (out_data_TREADY or not(out_data_V_keep_V_1_mVld)));
    end process;

    out_data_V_keep_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    out_data_V_last_V_1_ack_out <= out_data_TREADY;

    out_data_V_last_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_last_V_1_mVld, out_data_V_last_V_1_areset_d)
    begin
        out_data_V_last_V_1_sRdy <= (not(out_data_V_last_V_1_areset_d) and (out_data_TREADY or not(out_data_V_last_V_1_mVld)));
    end process;

    out_data_V_last_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    out_data_V_strb_V_1_ack_out <= out_data_TREADY;

    out_data_V_strb_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_strb_V_1_mVld, out_data_V_strb_V_1_areset_d)
    begin
        out_data_V_strb_V_1_sRdy <= (not(out_data_V_strb_V_1_areset_d) and (out_data_TREADY or not(out_data_V_strb_V_1_mVld)));
    end process;

    out_data_V_strb_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    out_data_V_user_V_1_ack_out <= out_data_TREADY;

    out_data_V_user_V_1_sRdy_assign_proc : process(out_data_TREADY, out_data_V_user_V_1_mVld, out_data_V_user_V_1_areset_d)
    begin
        out_data_V_user_V_1_sRdy <= (not(out_data_V_user_V_1_areset_d) and (out_data_TREADY or not(out_data_V_user_V_1_mVld)));
    end process;

    out_data_V_user_V_1_vld_in <= grp_moments_Mat2AXIvideo_fu_254_out_data_TVALID;
    row_fu_281_p2 <= std_logic_vector(unsigned(row_i_reg_211) + unsigned(ap_const_lv11_1));
    tmp_1_fu_305_p3 <= 
        img_0_data_stream_0_V_dout when (tmp_i_12_reg_373(0) = '1') else 
        ap_const_lv8_0;
    tmp_2_fu_312_p3 <= 
        img_0_data_stream_1_V_dout when (tmp_i_12_reg_373(0) = '1') else 
        ap_const_lv8_0;
    tmp_i_12_fu_299_p2 <= "1" when (unsigned(col_i_reg_222) < unsigned(ap_const_lv11_1F5)) else "0";

    x_ap_vld_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7, ap_sig_707)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not(ap_sig_707))) then 
            x_ap_vld <= ap_const_logic_1;
        else 
            x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    y_ap_vld_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7, ap_sig_707)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not(ap_sig_707))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
