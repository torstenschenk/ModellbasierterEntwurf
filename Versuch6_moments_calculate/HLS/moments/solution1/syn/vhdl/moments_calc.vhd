-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity moments_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_in_data_stream_0_V_read : OUT STD_LOGIC;
    img_in_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_in_data_stream_1_V_read : OUT STD_LOGIC;
    img_in_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_in_data_stream_2_V_read : OUT STD_LOGIC;
    img_out_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_0_V_full_n : IN STD_LOGIC;
    img_out_data_stream_0_V_write : OUT STD_LOGIC;
    img_out_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_1_V_full_n : IN STD_LOGIC;
    img_out_data_stream_1_V_write : OUT STD_LOGIC;
    img_out_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_2_V_full_n : IN STD_LOGIC;
    img_out_data_stream_2_V_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (85 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (44 downto 0) );
end;


architecture behav of moments_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv86_0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv45_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_77 : BOOLEAN;
    signal img_in_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_117 : BOOLEAN;
    signal exitcond_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_in_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_in_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_out_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal img_out_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_out_data_stream_2_V_blk_n : STD_LOGIC;
    signal op2_assign_1_cast_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_1_cast_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal op2_assign_1_cast1_cast_fu_229_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal op2_assign_1_cast1_cast_reg_630 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_fu_239_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_reg_638 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_245_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_3_reg_643 : STD_LOGIC_VECTOR (41 downto 0);
    signal exitcond5_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_248_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal op2_assign_cast_fu_270_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal op2_assign_cast_reg_675 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_175 : BOOLEAN;
    signal op2_assign_cast1_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_cast1_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_284_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_reg_689 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_fu_308_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal next_mul_reg_694 : STD_LOGIC_VECTOR (20 downto 0);
    signal sel_tmp_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_194 : BOOLEAN;
    signal tmp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_452_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_reg_726 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_207 : BOOLEAN;
    signal tmp_5_fu_456_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_5_reg_732 : STD_LOGIC_VECTOR (20 downto 0);
    signal lhs_V_7_fu_460_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_218 : BOOLEAN;
    signal rhs_V_7_fu_463_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_13_reg_752 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_229 : BOOLEAN;
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_14_reg_757 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_15_reg_762 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_16_fu_491_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_16_reg_767 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_242 : BOOLEAN;
    signal r_V_17_fu_504_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_17_reg_772 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_18_fu_517_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_18_reg_777 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_V_8_fu_523_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_255 : BOOLEAN;
    signal r_V_12_fu_538_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_12_reg_788 : STD_LOGIC_VECTOR (43 downto 0);
    signal op2_assign_1_reg_139 : STD_LOGIC_VECTOR (10 downto 0);
    signal op2_assign_reg_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_274 : BOOLEAN;
    signal phi_mul_reg_161 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal m20_V_2_fu_76 : STD_LOGIC_VECTOR (41 downto 0);
    signal m20_V_1_fu_400_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal m02_V_2_fu_80 : STD_LOGIC_VECTOR (41 downto 0);
    signal m02_V_1_fu_394_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal m11_V_2_fu_84 : STD_LOGIC_VECTOR (41 downto 0);
    signal m11_V_1_fu_387_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal m10_V_2_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal m10_V_1_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m01_V_2_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal m01_V_1_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m00_V_2_fu_96 : STD_LOGIC_VECTOR (20 downto 0);
    signal m00_V_1_fu_366_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal op2_assign_4_fu_576_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_252_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_s_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_341_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal m00_V_fu_325_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal m01_V_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m10_V_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m11_V_fu_345_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_569_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal m20_V_fu_351_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_472_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_478_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_478_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_fu_484_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal rhs_V_fu_488_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_2_fu_497_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal rhs_V_2_fu_501_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_3_fu_510_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal rhs_V_3_fu_514_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_526_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_V_5_fu_532_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal rhs_V_5_fu_535_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_460 : BOOLEAN;
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal ssdm_int_V_write_assign_1_fu_544_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal op2_assign_4_fu_576_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal op2_assign_1_cast1_fu_225_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal op2_assign_4_fu_576_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_252_ap_start : STD_LOGIC;
    signal grp_fu_252_ap_done : STD_LOGIC;
    signal grp_fu_258_ap_start : STD_LOGIC;
    signal grp_fu_258_ap_done : STD_LOGIC;
    signal grp_fu_264_ap_start : STD_LOGIC;
    signal grp_fu_264_ap_done : STD_LOGIC;
    signal grp_fu_440_ap_start : STD_LOGIC;
    signal grp_fu_440_ap_done : STD_LOGIC;
    signal grp_fu_446_ap_start : STD_LOGIC;
    signal grp_fu_446_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);

    component moments_udiv_42ns_21ns_42_46_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component moments_udiv_32ns_21ns_32_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component moments_mul_21ns_21ns_42_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component moments_mul_43ns_43ns_86_11 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (85 downto 0) );
    end component;


    component moments_mac_muladd_11ns_11ns_42ns_42_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component moments_mul_mul_11ns_11ns_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    moments_udiv_42ns_21ns_42_46_seq_U10 : component moments_udiv_42ns_21ns_42_46_seq
    generic map (
        ID => 1,
        NUM_STAGE => 46,
        din0_WIDTH => 42,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_252_ap_start,
        done => grp_fu_252_ap_done,
        din0 => m11_V_2_fu_84,
        din1 => grp_fu_252_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_252_p2);

    moments_udiv_42ns_21ns_42_46_seq_U11 : component moments_udiv_42ns_21ns_42_46_seq
    generic map (
        ID => 1,
        NUM_STAGE => 46,
        din0_WIDTH => 42,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_258_ap_start,
        done => grp_fu_258_ap_done,
        din0 => m02_V_2_fu_80,
        din1 => grp_fu_258_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_258_p2);

    moments_udiv_42ns_21ns_42_46_seq_U12 : component moments_udiv_42ns_21ns_42_46_seq
    generic map (
        ID => 1,
        NUM_STAGE => 46,
        din0_WIDTH => 42,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_264_ap_start,
        done => grp_fu_264_ap_done,
        din0 => m20_V_2_fu_76,
        din1 => grp_fu_264_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_264_p2);

    moments_udiv_32ns_21ns_32_36_seq_U13 : component moments_udiv_32ns_21ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_440_ap_start,
        done => grp_fu_440_ap_done,
        din0 => m10_V_2_fu_88,
        din1 => grp_fu_440_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    moments_udiv_32ns_21ns_32_36_seq_U14 : component moments_udiv_32ns_21ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_446_ap_start,
        done => grp_fu_446_ap_done,
        din0 => m01_V_2_fu_92,
        din1 => grp_fu_446_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    moments_mul_21ns_21ns_42_3_U15 : component moments_mul_21ns_21ns_42_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_466_p2);

    moments_mul_21ns_21ns_42_3_U16 : component moments_mul_21ns_21ns_42_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_472_p0,
        din1 => grp_fu_472_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    moments_mul_21ns_21ns_42_3_U17 : component moments_mul_21ns_21ns_42_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_478_p0,
        din1 => grp_fu_478_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_478_p2);

    moments_mul_43ns_43ns_86_11_U18 : component moments_mul_43ns_43ns_86_11
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 43,
        din1_WIDTH => 43,
        dout_WIDTH => 86)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_526_p0,
        din1 => grp_fu_526_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_526_p2);

    moments_mac_muladd_11ns_11ns_42ns_42_1_U19 : component moments_mac_muladd_11ns_11ns_42ns_42_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_569_p0,
        din1 => grp_fu_569_p1,
        din2 => m02_V_2_fu_80,
        dout => grp_fu_569_p3);

    moments_mul_mul_11ns_11ns_22_1_U20 : component moments_mul_mul_11ns_11ns_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => op2_assign_4_fu_576_p0,
        din1 => op2_assign_4_fu_576_p1,
        dout => op2_assign_4_fu_576_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv21_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
                    ap_return_0_preg <= tmp_4_reg_726;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv21_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
                    ap_return_1_preg <= tmp_5_reg_732;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv86_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
                    ap_return_2_preg <= grp_fu_526_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv45_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
                    ap_return_3_preg <= ssdm_int_V_write_assign_1_fu_544_p1;
                end if; 
            end if;
        end if;
    end process;


    m00_V_2_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                m00_V_2_fu_96 <= m00_V_1_fu_366_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m00_V_2_fu_96 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    m01_V_2_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                m01_V_2_fu_92 <= m01_V_1_fu_373_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m01_V_2_fu_92 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m02_V_2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                m02_V_2_fu_80 <= m02_V_1_fu_394_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m02_V_2_fu_80 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    m10_V_2_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                m10_V_2_fu_88 <= m10_V_1_fu_380_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m10_V_2_fu_88 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m11_V_2_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                m11_V_2_fu_84 <= m11_V_1_fu_387_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m11_V_2_fu_84 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    m20_V_2_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                m20_V_2_fu_76 <= m20_V_1_fu_400_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m20_V_2_fu_76 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    op2_assign_1_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_175) and not((exitcond_fu_278_p2 = ap_const_lv1_0)))) then 
                op2_assign_1_reg_139 <= row_reg_638;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                op2_assign_1_reg_139 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    op2_assign_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                op2_assign_reg_150 <= col_reg_689;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_233_p2))) then 
                op2_assign_reg_150 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
                phi_mul_reg_161 <= next_mul_reg_694;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_233_p2))) then 
                phi_mul_reg_161 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_175))) then
                col_reg_689 <= col_fu_284_p2;
                    op2_assign_cast1_reg_681(10 downto 0) <= op2_assign_cast1_fu_274_p1(10 downto 0);
                    op2_assign_cast_reg_675(10 downto 0) <= op2_assign_cast_fu_270_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0) and not(ap_sig_175))) then
                next_mul_reg_694 <= next_mul_fu_308_p2;
                sel_tmp_reg_699 <= sel_tmp_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    op2_assign_1_cast1_cast_reg_630(10 downto 0) <= op2_assign_1_cast1_cast_fu_229_p1(10 downto 0);
                    op2_assign_1_cast_reg_625(10 downto 0) <= op2_assign_1_cast_fu_221_p1(10 downto 0);
                row_reg_638 <= row_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then
                r_V_12_reg_788 <= r_V_12_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                r_V_13_reg_752 <= grp_fu_466_p2;
                r_V_14_reg_757 <= grp_fu_472_p2;
                r_V_15_reg_762 <= grp_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                r_V_16_reg_767 <= r_V_16_fu_491_p2;
                r_V_17_reg_772 <= r_V_17_fu_504_p2;
                r_V_18_reg_777 <= r_V_18_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_233_p2))) then
                    tmp_3_reg_643(21 downto 0) <= tmp_3_fu_245_p1(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then
                tmp_4_reg_726 <= tmp_4_fu_452_p1;
                tmp_5_reg_732 <= tmp_5_fu_456_p1;
            end if;
        end if;
    end process;
    op2_assign_1_cast_reg_625(31 downto 11) <= "000000000000000000000";
    op2_assign_1_cast1_cast_reg_630(20 downto 11) <= "0000000000";
    tmp_3_reg_643(41 downto 22) <= "00000000000000000000";
    op2_assign_cast_reg_675(21 downto 11) <= "00000000000";
    op2_assign_cast1_reg_681(31 downto 11) <= "000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_278_p2, exitcond5_fu_233_p2, ap_sig_175, ap_sig_274)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond5_fu_233_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((not(ap_sig_175) and not((exitcond_fu_278_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((exitcond_fu_278_p2 = ap_const_lv1_0) and not(ap_sig_175))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(ap_sig_274)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st60_fsm_59)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st60_fsm_59)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(tmp_4_reg_726, ap_sig_cseq_ST_st60_fsm_59, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
            ap_return_0 <= tmp_4_reg_726;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(tmp_5_reg_732, ap_sig_cseq_ST_st60_fsm_59, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
            ap_return_1 <= tmp_5_reg_732;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_sig_cseq_ST_st60_fsm_59, grp_fu_526_p2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
            ap_return_2 <= grp_fu_526_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_sig_cseq_ST_st60_fsm_59, ssdm_int_V_write_assign_1_fu_544_p1, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
            ap_return_3 <= ssdm_int_V_write_assign_1_fu_544_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_sig_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_117 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_175_assign_proc : process(img_in_data_stream_0_V_empty_n, img_in_data_stream_1_V_empty_n, img_in_data_stream_2_V_empty_n, exitcond_fu_278_p2)
    begin
                ap_sig_175 <= (((exitcond_fu_278_p2 = ap_const_lv1_0) and (img_in_data_stream_0_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_278_p2 = ap_const_lv1_0) and (img_in_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_278_p2 = ap_const_lv1_0) and (img_in_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    ap_sig_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_194 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_207 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    ap_sig_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_218 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    ap_sig_229_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_229 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_242_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_242 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_255 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    ap_sig_274_assign_proc : process(img_out_data_stream_0_V_full_n, img_out_data_stream_1_V_full_n, img_out_data_stream_2_V_full_n)
    begin
                ap_sig_274 <= ((img_out_data_stream_0_V_full_n = ap_const_logic_0) or (img_out_data_stream_1_V_full_n = ap_const_logic_0) or (img_out_data_stream_2_V_full_n = ap_const_logic_0));
    end process;


    ap_sig_460_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_460 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    ap_sig_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_77 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_194)
    begin
        if (ap_sig_194) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_77)
    begin
        if (ap_sig_77) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_117)
    begin
        if (ap_sig_117) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_207)
    begin
        if (ap_sig_207) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_218)
    begin
        if (ap_sig_218) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_229)
    begin
        if (ap_sig_229) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_242)
    begin
        if (ap_sig_242) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_255)
    begin
        if (ap_sig_255) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_460)
    begin
        if (ap_sig_460) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_284_p2 <= std_logic_vector(unsigned(op2_assign_reg_150) + unsigned(ap_const_lv11_1));
    exitcond5_fu_233_p2 <= "1" when (op2_assign_1_reg_139 = ap_const_lv11_438) else "0";
    exitcond_fu_278_p2 <= "1" when (op2_assign_reg_150 = ap_const_lv11_780) else "0";

    grp_fu_252_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_fu_233_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond5_fu_233_p2)))) then 
            grp_fu_252_ap_start <= ap_const_logic_1;
        else 
            grp_fu_252_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_252_p1 <= tmp_1_fu_248_p1(21 - 1 downto 0);

    grp_fu_258_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_fu_233_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond5_fu_233_p2)))) then 
            grp_fu_258_ap_start <= ap_const_logic_1;
        else 
            grp_fu_258_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_258_p1 <= tmp_1_fu_248_p1(21 - 1 downto 0);

    grp_fu_264_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_fu_233_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond5_fu_233_p2)))) then 
            grp_fu_264_ap_start <= ap_const_logic_1;
        else 
            grp_fu_264_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_264_p1 <= tmp_1_fu_248_p1(21 - 1 downto 0);

    grp_fu_440_ap_start_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_440_ap_start <= ap_const_logic_1;
        else 
            grp_fu_440_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_440_p1 <= tmp_fu_437_p1(21 - 1 downto 0);

    grp_fu_446_ap_start_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_446_ap_start <= ap_const_logic_1;
        else 
            grp_fu_446_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_446_p1 <= tmp_fu_437_p1(21 - 1 downto 0);
    grp_fu_466_p0 <= rhs_V_7_fu_463_p1(21 - 1 downto 0);
    grp_fu_466_p1 <= lhs_V_7_fu_460_p1(21 - 1 downto 0);
    grp_fu_472_p0 <= lhs_V_7_fu_460_p1(21 - 1 downto 0);
    grp_fu_472_p1 <= lhs_V_7_fu_460_p1(21 - 1 downto 0);
    grp_fu_478_p0 <= rhs_V_7_fu_463_p1(21 - 1 downto 0);
    grp_fu_478_p1 <= rhs_V_7_fu_463_p1(21 - 1 downto 0);
    grp_fu_526_p0 <= lhs_V_8_fu_523_p1(43 - 1 downto 0);
    grp_fu_526_p1 <= lhs_V_8_fu_523_p1(43 - 1 downto 0);
    grp_fu_569_p0 <= op2_assign_cast_reg_675(11 - 1 downto 0);
    grp_fu_569_p1 <= op2_assign_cast_reg_675(11 - 1 downto 0);

    img_in_data_stream_0_V_blk_n_assign_proc : process(img_in_data_stream_0_V_empty_n, ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0))) then 
            img_in_data_stream_0_V_blk_n <= img_in_data_stream_0_V_empty_n;
        else 
            img_in_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_data_stream_0_V_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_278_p2, ap_sig_175)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0) and not(ap_sig_175))) then 
            img_in_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_in_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in_data_stream_1_V_blk_n_assign_proc : process(img_in_data_stream_1_V_empty_n, ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0))) then 
            img_in_data_stream_1_V_blk_n <= img_in_data_stream_1_V_empty_n;
        else 
            img_in_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_data_stream_1_V_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_278_p2, ap_sig_175)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0) and not(ap_sig_175))) then 
            img_in_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_in_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in_data_stream_2_V_blk_n_assign_proc : process(img_in_data_stream_2_V_empty_n, ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0))) then 
            img_in_data_stream_2_V_blk_n <= img_in_data_stream_2_V_empty_n;
        else 
            img_in_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_data_stream_2_V_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_278_p2, ap_sig_175)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_278_p2 = ap_const_lv1_0) and not(ap_sig_175))) then 
            img_in_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_in_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_0_V_blk_n_assign_proc : process(img_out_data_stream_0_V_full_n, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            img_out_data_stream_0_V_blk_n <= img_out_data_stream_0_V_full_n;
        else 
            img_out_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_0_V_din <= tmp_6_fu_356_p3;

    img_out_data_stream_0_V_write_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_274)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
            img_out_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_1_V_blk_n_assign_proc : process(img_out_data_stream_1_V_full_n, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            img_out_data_stream_1_V_blk_n <= img_out_data_stream_1_V_full_n;
        else 
            img_out_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_1_V_din <= tmp_6_fu_356_p3;

    img_out_data_stream_1_V_write_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_274)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
            img_out_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_2_V_blk_n_assign_proc : process(img_out_data_stream_2_V_full_n, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            img_out_data_stream_2_V_blk_n <= img_out_data_stream_2_V_full_n;
        else 
            img_out_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_2_V_din <= tmp_6_fu_356_p3;

    img_out_data_stream_2_V_write_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_274)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_274))) then 
            img_out_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_2_fu_497_p1 <= std_logic_vector(resize(unsigned(grp_fu_258_p2),43));
    lhs_V_3_fu_510_p1 <= std_logic_vector(resize(unsigned(grp_fu_264_p2),43));
    lhs_V_5_fu_532_p1 <= std_logic_vector(resize(unsigned(r_V_18_reg_777),44));
    lhs_V_7_fu_460_p1 <= std_logic_vector(resize(unsigned(tmp_4_reg_726),42));
    lhs_V_8_fu_523_p1 <= std_logic_vector(resize(unsigned(r_V_16_reg_767),86));
    lhs_V_fu_484_p1 <= std_logic_vector(resize(unsigned(grp_fu_252_p2),43));
    m00_V_1_fu_366_p3 <= 
        m00_V_fu_325_p2 when (sel_tmp_reg_699(0) = '1') else 
        m00_V_2_fu_96;
    m00_V_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv21_1) + unsigned(m00_V_2_fu_96));
    m01_V_1_fu_373_p3 <= 
        m01_V_fu_331_p2 when (sel_tmp_reg_699(0) = '1') else 
        m01_V_2_fu_92;
    m01_V_fu_331_p2 <= std_logic_vector(unsigned(op2_assign_cast1_reg_681) + unsigned(m01_V_2_fu_92));
    m02_V_1_fu_394_p3 <= 
        grp_fu_569_p3 when (sel_tmp_reg_699(0) = '1') else 
        m02_V_2_fu_80;
    m10_V_1_fu_380_p3 <= 
        m10_V_fu_336_p2 when (sel_tmp_reg_699(0) = '1') else 
        m10_V_2_fu_88;
    m10_V_fu_336_p2 <= std_logic_vector(unsigned(m10_V_2_fu_88) + unsigned(op2_assign_1_cast_reg_625));
    m11_V_1_fu_387_p3 <= 
        m11_V_fu_345_p2 when (sel_tmp_reg_699(0) = '1') else 
        m11_V_2_fu_84;
    m11_V_fu_345_p2 <= std_logic_vector(unsigned(tmp_10_fu_341_p1) + unsigned(m11_V_2_fu_84));
    m20_V_1_fu_400_p3 <= 
        m20_V_fu_351_p2 when (sel_tmp_reg_699(0) = '1') else 
        m20_V_2_fu_76;
    m20_V_fu_351_p2 <= std_logic_vector(unsigned(tmp_3_reg_643) + unsigned(m20_V_2_fu_76));
    next_mul_fu_308_p2 <= std_logic_vector(unsigned(op2_assign_1_cast1_cast_reg_630) + unsigned(phi_mul_reg_161));
    op2_assign_1_cast1_cast_fu_229_p1 <= std_logic_vector(resize(unsigned(op2_assign_1_reg_139),21));
    op2_assign_1_cast1_fu_225_p1 <= std_logic_vector(resize(unsigned(op2_assign_1_reg_139),22));
    op2_assign_1_cast_fu_221_p1 <= std_logic_vector(resize(unsigned(op2_assign_1_reg_139),32));
    op2_assign_4_fu_576_p0 <= op2_assign_1_cast1_fu_225_p1(11 - 1 downto 0);
    op2_assign_4_fu_576_p1 <= op2_assign_1_cast1_fu_225_p1(11 - 1 downto 0);
    op2_assign_cast1_fu_274_p1 <= std_logic_vector(resize(unsigned(op2_assign_reg_150),32));
    op2_assign_cast_fu_270_p1 <= std_logic_vector(resize(unsigned(op2_assign_reg_150),22));
    r_V_12_fu_538_p2 <= std_logic_vector(unsigned(lhs_V_5_fu_532_p1) - unsigned(rhs_V_5_fu_535_p1));
    r_V_16_fu_491_p2 <= std_logic_vector(unsigned(lhs_V_fu_484_p1) - unsigned(rhs_V_fu_488_p1));
    r_V_17_fu_504_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_497_p1) - unsigned(rhs_V_2_fu_501_p1));
    r_V_18_fu_517_p2 <= std_logic_vector(unsigned(lhs_V_3_fu_510_p1) - unsigned(rhs_V_3_fu_514_p1));
    rhs_V_2_fu_501_p1 <= std_logic_vector(resize(unsigned(r_V_15_reg_762),43));
    rhs_V_3_fu_514_p1 <= std_logic_vector(resize(unsigned(r_V_14_reg_757),43));
    rhs_V_5_fu_535_p1 <= std_logic_vector(resize(unsigned(r_V_17_reg_772),44));
    rhs_V_7_fu_463_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_732),42));
    rhs_V_fu_488_p1 <= std_logic_vector(resize(unsigned(r_V_13_reg_752),43));
    row_fu_239_p2 <= std_logic_vector(unsigned(op2_assign_1_reg_139) + unsigned(ap_const_lv11_1));
    sel_tmp_fu_319_p2 <= (tmp5_fu_313_p2 or tmp_9_fu_296_p2);
        ssdm_int_V_write_assign_1_fu_544_p1 <= std_logic_vector(resize(signed(r_V_12_reg_788),45));

    tmp5_fu_313_p2 <= (tmp_s_fu_302_p2 or tmp_8_fu_290_p2);
    tmp_10_fu_341_p1 <= std_logic_vector(resize(unsigned(phi_mul_reg_161),42));
    tmp_1_fu_248_p1 <= std_logic_vector(resize(unsigned(m00_V_2_fu_96),42));
    tmp_3_fu_245_p1 <= std_logic_vector(resize(unsigned(op2_assign_4_fu_576_p2),42));
    tmp_4_fu_452_p1 <= grp_fu_440_p2(21 - 1 downto 0);
    tmp_5_fu_456_p1 <= grp_fu_446_p2(21 - 1 downto 0);
    tmp_6_fu_356_p3 <= 
        ap_const_lv8_FF when (sel_tmp_reg_699(0) = '1') else 
        ap_const_lv8_0;
    tmp_8_fu_290_p2 <= "1" when (unsigned(img_in_data_stream_0_V_dout) > unsigned(ap_const_lv8_80)) else "0";
    tmp_9_fu_296_p2 <= "1" when (unsigned(img_in_data_stream_1_V_dout) > unsigned(ap_const_lv8_80)) else "0";
    tmp_fu_437_p1 <= std_logic_vector(resize(unsigned(m00_V_2_fu_96),32));
    tmp_s_fu_302_p2 <= "1" when (unsigned(img_in_data_stream_2_V_dout) > unsigned(ap_const_lv8_80)) else "0";
end behav;
